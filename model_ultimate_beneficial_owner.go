/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UltimateBeneficialOwner struct for UltimateBeneficialOwner
type UltimateBeneficialOwner struct {
	// Client First Name
	Firstname string `json:"firstname"`
	// Client Last Name
	Lastname string `json:"lastname"`
	// Client Nationality (use ISO 3166-1 alpha-3 format)
	Nationality string `json:"nationality"`
	// Client Birthdate
	DateOfBirth string `json:"dateOfBirth"`
	// Client City of Birth
	CityOfBirth *string `json:"cityOfBirth,omitempty"`
	// Client Country of Birth (use ISO 3166-1 alpha-3 format)
	CountryOfBirth *string `json:"countryOfBirth,omitempty"`
	// Country of Residence (use ISO 3166-1 alpha-3 format)
	CountryOfResidence string `json:"countryOfResidence"`
	StartDate *int32 `json:"startDate,omitempty"`
	EndDate *int32 `json:"endDate,omitempty"`
	// Ultimate Beneficial Owner ID
	UltimateBeneficialOwnerId *int64 `json:"ultimateBeneficialOwnerId,omitempty"`
}

// NewUltimateBeneficialOwner instantiates a new UltimateBeneficialOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUltimateBeneficialOwner(firstname string, lastname string, nationality string, dateOfBirth string, countryOfResidence string) *UltimateBeneficialOwner {
	this := UltimateBeneficialOwner{}
	this.Firstname = firstname
	this.Lastname = lastname
	this.Nationality = nationality
	this.DateOfBirth = dateOfBirth
	this.CountryOfResidence = countryOfResidence
	return &this
}

// NewUltimateBeneficialOwnerWithDefaults instantiates a new UltimateBeneficialOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUltimateBeneficialOwnerWithDefaults() *UltimateBeneficialOwner {
	this := UltimateBeneficialOwner{}
	return &this
}

// GetFirstname returns the Firstname field value
func (o *UltimateBeneficialOwner) GetFirstname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Firstname
}

// GetFirstnameOk returns a tuple with the Firstname field value
// and a boolean to check if the value has been set.
func (o *UltimateBeneficialOwner) GetFirstnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Firstname, true
}

// SetFirstname sets field value
func (o *UltimateBeneficialOwner) SetFirstname(v string) {
	o.Firstname = v
}

// GetLastname returns the Lastname field value
func (o *UltimateBeneficialOwner) GetLastname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lastname
}

// GetLastnameOk returns a tuple with the Lastname field value
// and a boolean to check if the value has been set.
func (o *UltimateBeneficialOwner) GetLastnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lastname, true
}

// SetLastname sets field value
func (o *UltimateBeneficialOwner) SetLastname(v string) {
	o.Lastname = v
}

// GetNationality returns the Nationality field value
func (o *UltimateBeneficialOwner) GetNationality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nationality
}

// GetNationalityOk returns a tuple with the Nationality field value
// and a boolean to check if the value has been set.
func (o *UltimateBeneficialOwner) GetNationalityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nationality, true
}

// SetNationality sets field value
func (o *UltimateBeneficialOwner) SetNationality(v string) {
	o.Nationality = v
}

// GetDateOfBirth returns the DateOfBirth field value
func (o *UltimateBeneficialOwner) GetDateOfBirth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value
// and a boolean to check if the value has been set.
func (o *UltimateBeneficialOwner) GetDateOfBirthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateOfBirth, true
}

// SetDateOfBirth sets field value
func (o *UltimateBeneficialOwner) SetDateOfBirth(v string) {
	o.DateOfBirth = v
}

// GetCityOfBirth returns the CityOfBirth field value if set, zero value otherwise.
func (o *UltimateBeneficialOwner) GetCityOfBirth() string {
	if o == nil || o.CityOfBirth == nil {
		var ret string
		return ret
	}
	return *o.CityOfBirth
}

// GetCityOfBirthOk returns a tuple with the CityOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UltimateBeneficialOwner) GetCityOfBirthOk() (*string, bool) {
	if o == nil || o.CityOfBirth == nil {
		return nil, false
	}
	return o.CityOfBirth, true
}

// HasCityOfBirth returns a boolean if a field has been set.
func (o *UltimateBeneficialOwner) HasCityOfBirth() bool {
	if o != nil && o.CityOfBirth != nil {
		return true
	}

	return false
}

// SetCityOfBirth gets a reference to the given string and assigns it to the CityOfBirth field.
func (o *UltimateBeneficialOwner) SetCityOfBirth(v string) {
	o.CityOfBirth = &v
}

// GetCountryOfBirth returns the CountryOfBirth field value if set, zero value otherwise.
func (o *UltimateBeneficialOwner) GetCountryOfBirth() string {
	if o == nil || o.CountryOfBirth == nil {
		var ret string
		return ret
	}
	return *o.CountryOfBirth
}

// GetCountryOfBirthOk returns a tuple with the CountryOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UltimateBeneficialOwner) GetCountryOfBirthOk() (*string, bool) {
	if o == nil || o.CountryOfBirth == nil {
		return nil, false
	}
	return o.CountryOfBirth, true
}

// HasCountryOfBirth returns a boolean if a field has been set.
func (o *UltimateBeneficialOwner) HasCountryOfBirth() bool {
	if o != nil && o.CountryOfBirth != nil {
		return true
	}

	return false
}

// SetCountryOfBirth gets a reference to the given string and assigns it to the CountryOfBirth field.
func (o *UltimateBeneficialOwner) SetCountryOfBirth(v string) {
	o.CountryOfBirth = &v
}

// GetCountryOfResidence returns the CountryOfResidence field value
func (o *UltimateBeneficialOwner) GetCountryOfResidence() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryOfResidence
}

// GetCountryOfResidenceOk returns a tuple with the CountryOfResidence field value
// and a boolean to check if the value has been set.
func (o *UltimateBeneficialOwner) GetCountryOfResidenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryOfResidence, true
}

// SetCountryOfResidence sets field value
func (o *UltimateBeneficialOwner) SetCountryOfResidence(v string) {
	o.CountryOfResidence = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *UltimateBeneficialOwner) GetStartDate() int32 {
	if o == nil || o.StartDate == nil {
		var ret int32
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UltimateBeneficialOwner) GetStartDateOk() (*int32, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *UltimateBeneficialOwner) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int32 and assigns it to the StartDate field.
func (o *UltimateBeneficialOwner) SetStartDate(v int32) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *UltimateBeneficialOwner) GetEndDate() int32 {
	if o == nil || o.EndDate == nil {
		var ret int32
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UltimateBeneficialOwner) GetEndDateOk() (*int32, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *UltimateBeneficialOwner) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int32 and assigns it to the EndDate field.
func (o *UltimateBeneficialOwner) SetEndDate(v int32) {
	o.EndDate = &v
}

// GetUltimateBeneficialOwnerId returns the UltimateBeneficialOwnerId field value if set, zero value otherwise.
func (o *UltimateBeneficialOwner) GetUltimateBeneficialOwnerId() int64 {
	if o == nil || o.UltimateBeneficialOwnerId == nil {
		var ret int64
		return ret
	}
	return *o.UltimateBeneficialOwnerId
}

// GetUltimateBeneficialOwnerIdOk returns a tuple with the UltimateBeneficialOwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UltimateBeneficialOwner) GetUltimateBeneficialOwnerIdOk() (*int64, bool) {
	if o == nil || o.UltimateBeneficialOwnerId == nil {
		return nil, false
	}
	return o.UltimateBeneficialOwnerId, true
}

// HasUltimateBeneficialOwnerId returns a boolean if a field has been set.
func (o *UltimateBeneficialOwner) HasUltimateBeneficialOwnerId() bool {
	if o != nil && o.UltimateBeneficialOwnerId != nil {
		return true
	}

	return false
}

// SetUltimateBeneficialOwnerId gets a reference to the given int64 and assigns it to the UltimateBeneficialOwnerId field.
func (o *UltimateBeneficialOwner) SetUltimateBeneficialOwnerId(v int64) {
	o.UltimateBeneficialOwnerId = &v
}

func (o UltimateBeneficialOwner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["firstname"] = o.Firstname
	}
	if true {
		toSerialize["lastname"] = o.Lastname
	}
	if true {
		toSerialize["nationality"] = o.Nationality
	}
	if true {
		toSerialize["dateOfBirth"] = o.DateOfBirth
	}
	if o.CityOfBirth != nil {
		toSerialize["cityOfBirth"] = o.CityOfBirth
	}
	if o.CountryOfBirth != nil {
		toSerialize["countryOfBirth"] = o.CountryOfBirth
	}
	if true {
		toSerialize["countryOfResidence"] = o.CountryOfResidence
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.UltimateBeneficialOwnerId != nil {
		toSerialize["ultimateBeneficialOwnerId"] = o.UltimateBeneficialOwnerId
	}
	return json.Marshal(toSerialize)
}

type NullableUltimateBeneficialOwner struct {
	value *UltimateBeneficialOwner
	isSet bool
}

func (v NullableUltimateBeneficialOwner) Get() *UltimateBeneficialOwner {
	return v.value
}

func (v *NullableUltimateBeneficialOwner) Set(val *UltimateBeneficialOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableUltimateBeneficialOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableUltimateBeneficialOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUltimateBeneficialOwner(val *UltimateBeneficialOwner) *NullableUltimateBeneficialOwner {
	return &NullableUltimateBeneficialOwner{value: val, isSet: true}
}

func (v NullableUltimateBeneficialOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUltimateBeneficialOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


