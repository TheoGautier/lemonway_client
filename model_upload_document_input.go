/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadDocumentInput struct for UploadDocumentInput
type UploadDocumentInput struct {
	// Document Name
	Name string `json:"name"`
	// Document Type:    **Note:**     If you have previously uploaded a document in a reserved **slot(0-13)** and need to upload another document of the same type, use the slot **Other document(6, 14-20)**.<br/>0 = ID card (both sides in one file).<br/>1 = Proof of address.<br/>2 = Scan of a proof of IBAN.<br/>3 = Passport (European Union).<br/>4 = Passport (outside the European Union).<br/>5 = Residence permit (both sides in one file).<br/>6 = Other document type.<br/>7 = Official company registration document (Kbis extract or equivalent).<br/>11 = Driver licence (both sides in one file).<br/>12 = Status.<br/>13 = Selfie.<br/>14 = Other document type.<br/>15 = Other document type.<br/>16 = Other document type.<br/>17 = Other document type.<br/>18 = Other document type.<br/>19 = Other document type.<br/>20 = Other document type.<br/>21 = SDD mandate.<br/>
	Type int32 `json:"type"`
	// Byte array with the document. Encode in base 64 if necessary.
	Buffer string `json:"buffer"`
	// Lets you upload your signed(with your own signing partner) mandate document, to validate a mandate ID you previously created with `RegisterSddMandate`.
	SddMandateId *int64 `json:"sddMandateId,omitempty"`
}

// NewUploadDocumentInput instantiates a new UploadDocumentInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadDocumentInput(name string, type_ int32, buffer string) *UploadDocumentInput {
	this := UploadDocumentInput{}
	this.Name = name
	this.Type = type_
	this.Buffer = buffer
	return &this
}

// NewUploadDocumentInputWithDefaults instantiates a new UploadDocumentInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadDocumentInputWithDefaults() *UploadDocumentInput {
	this := UploadDocumentInput{}
	return &this
}

// GetName returns the Name field value
func (o *UploadDocumentInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UploadDocumentInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UploadDocumentInput) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *UploadDocumentInput) GetType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UploadDocumentInput) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UploadDocumentInput) SetType(v int32) {
	o.Type = v
}

// GetBuffer returns the Buffer field value
func (o *UploadDocumentInput) GetBuffer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Buffer
}

// GetBufferOk returns a tuple with the Buffer field value
// and a boolean to check if the value has been set.
func (o *UploadDocumentInput) GetBufferOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buffer, true
}

// SetBuffer sets field value
func (o *UploadDocumentInput) SetBuffer(v string) {
	o.Buffer = v
}

// GetSddMandateId returns the SddMandateId field value if set, zero value otherwise.
func (o *UploadDocumentInput) GetSddMandateId() int64 {
	if o == nil || o.SddMandateId == nil {
		var ret int64
		return ret
	}
	return *o.SddMandateId
}

// GetSddMandateIdOk returns a tuple with the SddMandateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadDocumentInput) GetSddMandateIdOk() (*int64, bool) {
	if o == nil || o.SddMandateId == nil {
		return nil, false
	}
	return o.SddMandateId, true
}

// HasSddMandateId returns a boolean if a field has been set.
func (o *UploadDocumentInput) HasSddMandateId() bool {
	if o != nil && o.SddMandateId != nil {
		return true
	}

	return false
}

// SetSddMandateId gets a reference to the given int64 and assigns it to the SddMandateId field.
func (o *UploadDocumentInput) SetSddMandateId(v int64) {
	o.SddMandateId = &v
}

func (o UploadDocumentInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["buffer"] = o.Buffer
	}
	if o.SddMandateId != nil {
		toSerialize["sddMandateId"] = o.SddMandateId
	}
	return json.Marshal(toSerialize)
}

type NullableUploadDocumentInput struct {
	value *UploadDocumentInput
	isSet bool
}

func (v NullableUploadDocumentInput) Get() *UploadDocumentInput {
	return v.value
}

func (v *NullableUploadDocumentInput) Set(val *UploadDocumentInput) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadDocumentInput) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadDocumentInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadDocumentInput(val *UploadDocumentInput) *NullableUploadDocumentInput {
	return &NullableUploadDocumentInput{value: val, isSet: true}
}

func (v NullableUploadDocumentInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadDocumentInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


