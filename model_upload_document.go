/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadDocument struct for UploadDocument
type UploadDocument struct {
	// Document ID
	Id *int64 `json:"id,omitempty"`
	// Document Status:<br/>0 = Document put on hold, waiting for another document.<br/>1 = Received, need manual validation.<br/>2 = Accepted.<br/>3 = Rejected.<br/>4 = Rejected. Unreadable by human (Cropped, blur, glare…).<br/>5 = Rejected. Expired (Expiration Date is passed).<br/>6 = Rejected. Wrong Type (Document not accepted).<br/>7 = Rejected. Wrong Name (Name not matching user information).<br/>8 = Rejected. Duplicated Document.<br/>
	Status *int32 `json:"status,omitempty"`
	// Document sub-status. Only when Status = 1:<br/>1 = Document type not processable automatically.<br/>2 = Unreadable by computer (Cropped, blur, glare…).<br/>3 = Wrong Type.<br/>4 = Wrong Name (Name not matching user information).<br/>5 = File too big (File should not be over 4MB to be processed automatically).<br/>6 = Automatic Controls Failed.<br/>7 = Need 2 sides of the document in one file.<br/>8 = Unknown.<br/>
	Substatus *int32 `json:"substatus,omitempty"`
	// Payment account status<br/>2 = Registered, KYC incomplete.<br/>3 = Registered, rejected KYC.<br/>5 = Registered, KYC 1 (status given at registration).<br/>6 = Registered, KYC 2.<br/>7 = Registered, KYC 3.<br/>8 = Registered, expired KYC.<br/>10 = Blocked.<br/>12 = Closed.<br/>13 = Registered, status is being updated from KYC 2 to KYC 3.<br/>14 = One-time customer.<br/>15 = Special account for crowdlending.<br/>16 = Technical account.<br/>
	Accountstatus *int32 `json:"accountstatus,omitempty"`
}

// NewUploadDocument instantiates a new UploadDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadDocument() *UploadDocument {
	this := UploadDocument{}
	return &this
}

// NewUploadDocumentWithDefaults instantiates a new UploadDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadDocumentWithDefaults() *UploadDocument {
	this := UploadDocument{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UploadDocument) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadDocument) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UploadDocument) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *UploadDocument) SetId(v int64) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UploadDocument) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadDocument) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UploadDocument) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *UploadDocument) SetStatus(v int32) {
	o.Status = &v
}

// GetSubstatus returns the Substatus field value if set, zero value otherwise.
func (o *UploadDocument) GetSubstatus() int32 {
	if o == nil || o.Substatus == nil {
		var ret int32
		return ret
	}
	return *o.Substatus
}

// GetSubstatusOk returns a tuple with the Substatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadDocument) GetSubstatusOk() (*int32, bool) {
	if o == nil || o.Substatus == nil {
		return nil, false
	}
	return o.Substatus, true
}

// HasSubstatus returns a boolean if a field has been set.
func (o *UploadDocument) HasSubstatus() bool {
	if o != nil && o.Substatus != nil {
		return true
	}

	return false
}

// SetSubstatus gets a reference to the given int32 and assigns it to the Substatus field.
func (o *UploadDocument) SetSubstatus(v int32) {
	o.Substatus = &v
}

// GetAccountstatus returns the Accountstatus field value if set, zero value otherwise.
func (o *UploadDocument) GetAccountstatus() int32 {
	if o == nil || o.Accountstatus == nil {
		var ret int32
		return ret
	}
	return *o.Accountstatus
}

// GetAccountstatusOk returns a tuple with the Accountstatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadDocument) GetAccountstatusOk() (*int32, bool) {
	if o == nil || o.Accountstatus == nil {
		return nil, false
	}
	return o.Accountstatus, true
}

// HasAccountstatus returns a boolean if a field has been set.
func (o *UploadDocument) HasAccountstatus() bool {
	if o != nil && o.Accountstatus != nil {
		return true
	}

	return false
}

// SetAccountstatus gets a reference to the given int32 and assigns it to the Accountstatus field.
func (o *UploadDocument) SetAccountstatus(v int32) {
	o.Accountstatus = &v
}

func (o UploadDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Substatus != nil {
		toSerialize["substatus"] = o.Substatus
	}
	if o.Accountstatus != nil {
		toSerialize["accountstatus"] = o.Accountstatus
	}
	return json.Marshal(toSerialize)
}

type NullableUploadDocument struct {
	value *UploadDocument
	isSet bool
}

func (v NullableUploadDocument) Get() *UploadDocument {
	return v.value
}

func (v *NullableUploadDocument) Set(val *UploadDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadDocument(val *UploadDocument) *NullableUploadDocument {
	return &NullableUploadDocument{value: val, isSet: true}
}

func (v NullableUploadDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


