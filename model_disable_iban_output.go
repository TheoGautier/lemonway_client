/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DisableIBANOutput struct for DisableIBANOutput
type DisableIBANOutput struct {
	// IBAN ID
	Id *int64 `json:"id,omitempty"`
	// IBAN Status
	Status *int32 `json:"status,omitempty"`
	Error *Error `json:"error,omitempty"`
}

// NewDisableIBANOutput instantiates a new DisableIBANOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisableIBANOutput() *DisableIBANOutput {
	this := DisableIBANOutput{}
	return &this
}

// NewDisableIBANOutputWithDefaults instantiates a new DisableIBANOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisableIBANOutputWithDefaults() *DisableIBANOutput {
	this := DisableIBANOutput{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DisableIBANOutput) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisableIBANOutput) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DisableIBANOutput) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DisableIBANOutput) SetId(v int64) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DisableIBANOutput) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisableIBANOutput) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DisableIBANOutput) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *DisableIBANOutput) SetStatus(v int32) {
	o.Status = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DisableIBANOutput) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisableIBANOutput) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DisableIBANOutput) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *DisableIBANOutput) SetError(v Error) {
	o.Error = &v
}

func (o DisableIBANOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableDisableIBANOutput struct {
	value *DisableIBANOutput
	isSet bool
}

func (v NullableDisableIBANOutput) Get() *DisableIBANOutput {
	return v.value
}

func (v *NullableDisableIBANOutput) Set(val *DisableIBANOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableDisableIBANOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableDisableIBANOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisableIBANOutput(val *DisableIBANOutput) *NullableDisableIBANOutput {
	return &NullableDisableIBANOutput{value: val, isSet: true}
}

func (v NullableDisableIBANOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisableIBANOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


