/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadDocumentOutput struct for UploadDocumentOutput
type UploadDocumentOutput struct {
	UploadDocument *UploadDocument `json:"uploadDocument,omitempty"`
	Error *Error `json:"error,omitempty"`
}

// NewUploadDocumentOutput instantiates a new UploadDocumentOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadDocumentOutput() *UploadDocumentOutput {
	this := UploadDocumentOutput{}
	return &this
}

// NewUploadDocumentOutputWithDefaults instantiates a new UploadDocumentOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadDocumentOutputWithDefaults() *UploadDocumentOutput {
	this := UploadDocumentOutput{}
	return &this
}

// GetUploadDocument returns the UploadDocument field value if set, zero value otherwise.
func (o *UploadDocumentOutput) GetUploadDocument() UploadDocument {
	if o == nil || o.UploadDocument == nil {
		var ret UploadDocument
		return ret
	}
	return *o.UploadDocument
}

// GetUploadDocumentOk returns a tuple with the UploadDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadDocumentOutput) GetUploadDocumentOk() (*UploadDocument, bool) {
	if o == nil || o.UploadDocument == nil {
		return nil, false
	}
	return o.UploadDocument, true
}

// HasUploadDocument returns a boolean if a field has been set.
func (o *UploadDocumentOutput) HasUploadDocument() bool {
	if o != nil && o.UploadDocument != nil {
		return true
	}

	return false
}

// SetUploadDocument gets a reference to the given UploadDocument and assigns it to the UploadDocument field.
func (o *UploadDocumentOutput) SetUploadDocument(v UploadDocument) {
	o.UploadDocument = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *UploadDocumentOutput) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadDocumentOutput) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *UploadDocumentOutput) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *UploadDocumentOutput) SetError(v Error) {
	o.Error = &v
}

func (o UploadDocumentOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UploadDocument != nil {
		toSerialize["uploadDocument"] = o.UploadDocument
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableUploadDocumentOutput struct {
	value *UploadDocumentOutput
	isSet bool
}

func (v NullableUploadDocumentOutput) Get() *UploadDocumentOutput {
	return v.value
}

func (v *NullableUploadDocumentOutput) Set(val *UploadDocumentOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadDocumentOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadDocumentOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadDocumentOutput(val *UploadDocumentOutput) *NullableUploadDocumentOutput {
	return &NullableUploadDocumentOutput{value: val, isSet: true}
}

func (v NullableUploadDocumentOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadDocumentOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


