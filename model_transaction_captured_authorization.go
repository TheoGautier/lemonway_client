/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionCapturedAuthorization struct for TransactionCapturedAuthorization
type TransactionCapturedAuthorization struct {
	Id *int64 `json:"id,omitempty"`
	Status *int32 `json:"status,omitempty"`
	RemainingAmount *int32 `json:"remainingAmount,omitempty"`
}

// NewTransactionCapturedAuthorization instantiates a new TransactionCapturedAuthorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionCapturedAuthorization() *TransactionCapturedAuthorization {
	this := TransactionCapturedAuthorization{}
	return &this
}

// NewTransactionCapturedAuthorizationWithDefaults instantiates a new TransactionCapturedAuthorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionCapturedAuthorizationWithDefaults() *TransactionCapturedAuthorization {
	this := TransactionCapturedAuthorization{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TransactionCapturedAuthorization) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCapturedAuthorization) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TransactionCapturedAuthorization) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TransactionCapturedAuthorization) SetId(v int64) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TransactionCapturedAuthorization) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCapturedAuthorization) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TransactionCapturedAuthorization) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *TransactionCapturedAuthorization) SetStatus(v int32) {
	o.Status = &v
}

// GetRemainingAmount returns the RemainingAmount field value if set, zero value otherwise.
func (o *TransactionCapturedAuthorization) GetRemainingAmount() int32 {
	if o == nil || o.RemainingAmount == nil {
		var ret int32
		return ret
	}
	return *o.RemainingAmount
}

// GetRemainingAmountOk returns a tuple with the RemainingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCapturedAuthorization) GetRemainingAmountOk() (*int32, bool) {
	if o == nil || o.RemainingAmount == nil {
		return nil, false
	}
	return o.RemainingAmount, true
}

// HasRemainingAmount returns a boolean if a field has been set.
func (o *TransactionCapturedAuthorization) HasRemainingAmount() bool {
	if o != nil && o.RemainingAmount != nil {
		return true
	}

	return false
}

// SetRemainingAmount gets a reference to the given int32 and assigns it to the RemainingAmount field.
func (o *TransactionCapturedAuthorization) SetRemainingAmount(v int32) {
	o.RemainingAmount = &v
}

func (o TransactionCapturedAuthorization) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.RemainingAmount != nil {
		toSerialize["remainingAmount"] = o.RemainingAmount
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionCapturedAuthorization struct {
	value *TransactionCapturedAuthorization
	isSet bool
}

func (v NullableTransactionCapturedAuthorization) Get() *TransactionCapturedAuthorization {
	return v.value
}

func (v *NullableTransactionCapturedAuthorization) Set(val *TransactionCapturedAuthorization) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCapturedAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCapturedAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCapturedAuthorization(val *TransactionCapturedAuthorization) *NullableTransactionCapturedAuthorization {
	return &NullableTransactionCapturedAuthorization{value: val, isSet: true}
}

func (v NullableTransactionCapturedAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCapturedAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


