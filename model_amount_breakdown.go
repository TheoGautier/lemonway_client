/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AmountBreakdown The amount breakdown.
type AmountBreakdown struct {
	// The subtotal for all items.
	TotalItems *int32 `json:"totalItems,omitempty"`
	// The total tax for all items.
	TotalItemTaxes *int32 `json:"totalItemTaxes,omitempty"`
	// The shipping fee for all items.
	Shipping *int32 `json:"shipping,omitempty"`
	// The handling fee for all items.
	Handling *int32 `json:"handling,omitempty"`
	// The insurance fee for all items.
	Insurance *int32 `json:"insurance,omitempty"`
	// The shipping discount for all items.
	ShippingDiscount *int32 `json:"shippingDiscount,omitempty"`
	// The discount for all items.
	Discount *int32 `json:"discount,omitempty"`
}

// NewAmountBreakdown instantiates a new AmountBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmountBreakdown() *AmountBreakdown {
	this := AmountBreakdown{}
	return &this
}

// NewAmountBreakdownWithDefaults instantiates a new AmountBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmountBreakdownWithDefaults() *AmountBreakdown {
	this := AmountBreakdown{}
	return &this
}

// GetTotalItems returns the TotalItems field value if set, zero value otherwise.
func (o *AmountBreakdown) GetTotalItems() int32 {
	if o == nil || o.TotalItems == nil {
		var ret int32
		return ret
	}
	return *o.TotalItems
}

// GetTotalItemsOk returns a tuple with the TotalItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountBreakdown) GetTotalItemsOk() (*int32, bool) {
	if o == nil || o.TotalItems == nil {
		return nil, false
	}
	return o.TotalItems, true
}

// HasTotalItems returns a boolean if a field has been set.
func (o *AmountBreakdown) HasTotalItems() bool {
	if o != nil && o.TotalItems != nil {
		return true
	}

	return false
}

// SetTotalItems gets a reference to the given int32 and assigns it to the TotalItems field.
func (o *AmountBreakdown) SetTotalItems(v int32) {
	o.TotalItems = &v
}

// GetTotalItemTaxes returns the TotalItemTaxes field value if set, zero value otherwise.
func (o *AmountBreakdown) GetTotalItemTaxes() int32 {
	if o == nil || o.TotalItemTaxes == nil {
		var ret int32
		return ret
	}
	return *o.TotalItemTaxes
}

// GetTotalItemTaxesOk returns a tuple with the TotalItemTaxes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountBreakdown) GetTotalItemTaxesOk() (*int32, bool) {
	if o == nil || o.TotalItemTaxes == nil {
		return nil, false
	}
	return o.TotalItemTaxes, true
}

// HasTotalItemTaxes returns a boolean if a field has been set.
func (o *AmountBreakdown) HasTotalItemTaxes() bool {
	if o != nil && o.TotalItemTaxes != nil {
		return true
	}

	return false
}

// SetTotalItemTaxes gets a reference to the given int32 and assigns it to the TotalItemTaxes field.
func (o *AmountBreakdown) SetTotalItemTaxes(v int32) {
	o.TotalItemTaxes = &v
}

// GetShipping returns the Shipping field value if set, zero value otherwise.
func (o *AmountBreakdown) GetShipping() int32 {
	if o == nil || o.Shipping == nil {
		var ret int32
		return ret
	}
	return *o.Shipping
}

// GetShippingOk returns a tuple with the Shipping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountBreakdown) GetShippingOk() (*int32, bool) {
	if o == nil || o.Shipping == nil {
		return nil, false
	}
	return o.Shipping, true
}

// HasShipping returns a boolean if a field has been set.
func (o *AmountBreakdown) HasShipping() bool {
	if o != nil && o.Shipping != nil {
		return true
	}

	return false
}

// SetShipping gets a reference to the given int32 and assigns it to the Shipping field.
func (o *AmountBreakdown) SetShipping(v int32) {
	o.Shipping = &v
}

// GetHandling returns the Handling field value if set, zero value otherwise.
func (o *AmountBreakdown) GetHandling() int32 {
	if o == nil || o.Handling == nil {
		var ret int32
		return ret
	}
	return *o.Handling
}

// GetHandlingOk returns a tuple with the Handling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountBreakdown) GetHandlingOk() (*int32, bool) {
	if o == nil || o.Handling == nil {
		return nil, false
	}
	return o.Handling, true
}

// HasHandling returns a boolean if a field has been set.
func (o *AmountBreakdown) HasHandling() bool {
	if o != nil && o.Handling != nil {
		return true
	}

	return false
}

// SetHandling gets a reference to the given int32 and assigns it to the Handling field.
func (o *AmountBreakdown) SetHandling(v int32) {
	o.Handling = &v
}

// GetInsurance returns the Insurance field value if set, zero value otherwise.
func (o *AmountBreakdown) GetInsurance() int32 {
	if o == nil || o.Insurance == nil {
		var ret int32
		return ret
	}
	return *o.Insurance
}

// GetInsuranceOk returns a tuple with the Insurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountBreakdown) GetInsuranceOk() (*int32, bool) {
	if o == nil || o.Insurance == nil {
		return nil, false
	}
	return o.Insurance, true
}

// HasInsurance returns a boolean if a field has been set.
func (o *AmountBreakdown) HasInsurance() bool {
	if o != nil && o.Insurance != nil {
		return true
	}

	return false
}

// SetInsurance gets a reference to the given int32 and assigns it to the Insurance field.
func (o *AmountBreakdown) SetInsurance(v int32) {
	o.Insurance = &v
}

// GetShippingDiscount returns the ShippingDiscount field value if set, zero value otherwise.
func (o *AmountBreakdown) GetShippingDiscount() int32 {
	if o == nil || o.ShippingDiscount == nil {
		var ret int32
		return ret
	}
	return *o.ShippingDiscount
}

// GetShippingDiscountOk returns a tuple with the ShippingDiscount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountBreakdown) GetShippingDiscountOk() (*int32, bool) {
	if o == nil || o.ShippingDiscount == nil {
		return nil, false
	}
	return o.ShippingDiscount, true
}

// HasShippingDiscount returns a boolean if a field has been set.
func (o *AmountBreakdown) HasShippingDiscount() bool {
	if o != nil && o.ShippingDiscount != nil {
		return true
	}

	return false
}

// SetShippingDiscount gets a reference to the given int32 and assigns it to the ShippingDiscount field.
func (o *AmountBreakdown) SetShippingDiscount(v int32) {
	o.ShippingDiscount = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *AmountBreakdown) GetDiscount() int32 {
	if o == nil || o.Discount == nil {
		var ret int32
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountBreakdown) GetDiscountOk() (*int32, bool) {
	if o == nil || o.Discount == nil {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *AmountBreakdown) HasDiscount() bool {
	if o != nil && o.Discount != nil {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given int32 and assigns it to the Discount field.
func (o *AmountBreakdown) SetDiscount(v int32) {
	o.Discount = &v
}

func (o AmountBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalItems != nil {
		toSerialize["totalItems"] = o.TotalItems
	}
	if o.TotalItemTaxes != nil {
		toSerialize["totalItemTaxes"] = o.TotalItemTaxes
	}
	if o.Shipping != nil {
		toSerialize["shipping"] = o.Shipping
	}
	if o.Handling != nil {
		toSerialize["handling"] = o.Handling
	}
	if o.Insurance != nil {
		toSerialize["insurance"] = o.Insurance
	}
	if o.ShippingDiscount != nil {
		toSerialize["shippingDiscount"] = o.ShippingDiscount
	}
	if o.Discount != nil {
		toSerialize["discount"] = o.Discount
	}
	return json.Marshal(toSerialize)
}

type NullableAmountBreakdown struct {
	value *AmountBreakdown
	isSet bool
}

func (v NullableAmountBreakdown) Get() *AmountBreakdown {
	return v.value
}

func (v *NullableAmountBreakdown) Set(val *AmountBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableAmountBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableAmountBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmountBreakdown(val *AmountBreakdown) *NullableAmountBreakdown {
	return &NullableAmountBreakdown{value: val, isSet: true}
}

func (v NullableAmountBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmountBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


