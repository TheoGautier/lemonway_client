/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Birth struct for Birth
type Birth struct {
	// Client Date of Birth
	Date string `json:"date"`
	// Client City of Birth
	City *string `json:"city,omitempty"`
	// Client Country of Birth, using ISO 3166-1 alpha-3. Three-letter country code, for example: FRA (France), GBR (United Kingdom of Great Britain and Northern Ireland)
	Country *string `json:"Country,omitempty"`
}

// NewBirth instantiates a new Birth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBirth(date string) *Birth {
	this := Birth{}
	this.Date = date
	return &this
}

// NewBirthWithDefaults instantiates a new Birth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBirthWithDefaults() *Birth {
	this := Birth{}
	return &this
}

// GetDate returns the Date field value
func (o *Birth) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Birth) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Birth) SetDate(v string) {
	o.Date = v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *Birth) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Birth) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *Birth) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *Birth) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Birth) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Birth) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Birth) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Birth) SetCountry(v string) {
	o.Country = &v
}

func (o Birth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date"] = o.Date
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Country != nil {
		toSerialize["Country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableBirth struct {
	value *Birth
	isSet bool
}

func (v NullableBirth) Get() *Birth {
	return v.value
}

func (v *NullableBirth) Set(val *Birth) {
	v.value = val
	v.isSet = true
}

func (v NullableBirth) IsSet() bool {
	return v.isSet
}

func (v *NullableBirth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBirth(val *Birth) *NullableBirth {
	return &NullableBirth{value: val, isSet: true}
}

func (v NullableBirth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBirth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


