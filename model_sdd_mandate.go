/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SddMandate struct for SddMandate
type SddMandate struct {
	// Mandate ID
	Id *int64 `json:"id,omitempty"`
	// Mandate Status<br/>0 = Pending validation.<br/>5 = Validated, First SDD to be done.<br/>6 = Enabled.<br/>8 = Disabled.<br/>9 = Rejected.<br/>
	Status *int32 `json:"status,omitempty"`
	// IBAN associated to the mandate
	IBAN *string `json:"IBAN,omitempty"`
	// SWIFT code associated to the mandate
	BIC *string `json:"BIC,omitempty"`
	// IBAN Holder
	Holder *string `json:"holder,omitempty"`
	// Unique mandate reference
	UniqueMandateReference *string `json:"UniqueMandateReference,omitempty"`
}

// NewSddMandate instantiates a new SddMandate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSddMandate() *SddMandate {
	this := SddMandate{}
	return &this
}

// NewSddMandateWithDefaults instantiates a new SddMandate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSddMandateWithDefaults() *SddMandate {
	this := SddMandate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SddMandate) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SddMandate) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SddMandate) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SddMandate) SetId(v int64) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SddMandate) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SddMandate) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SddMandate) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *SddMandate) SetStatus(v int32) {
	o.Status = &v
}

// GetIBAN returns the IBAN field value if set, zero value otherwise.
func (o *SddMandate) GetIBAN() string {
	if o == nil || o.IBAN == nil {
		var ret string
		return ret
	}
	return *o.IBAN
}

// GetIBANOk returns a tuple with the IBAN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SddMandate) GetIBANOk() (*string, bool) {
	if o == nil || o.IBAN == nil {
		return nil, false
	}
	return o.IBAN, true
}

// HasIBAN returns a boolean if a field has been set.
func (o *SddMandate) HasIBAN() bool {
	if o != nil && o.IBAN != nil {
		return true
	}

	return false
}

// SetIBAN gets a reference to the given string and assigns it to the IBAN field.
func (o *SddMandate) SetIBAN(v string) {
	o.IBAN = &v
}

// GetBIC returns the BIC field value if set, zero value otherwise.
func (o *SddMandate) GetBIC() string {
	if o == nil || o.BIC == nil {
		var ret string
		return ret
	}
	return *o.BIC
}

// GetBICOk returns a tuple with the BIC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SddMandate) GetBICOk() (*string, bool) {
	if o == nil || o.BIC == nil {
		return nil, false
	}
	return o.BIC, true
}

// HasBIC returns a boolean if a field has been set.
func (o *SddMandate) HasBIC() bool {
	if o != nil && o.BIC != nil {
		return true
	}

	return false
}

// SetBIC gets a reference to the given string and assigns it to the BIC field.
func (o *SddMandate) SetBIC(v string) {
	o.BIC = &v
}

// GetHolder returns the Holder field value if set, zero value otherwise.
func (o *SddMandate) GetHolder() string {
	if o == nil || o.Holder == nil {
		var ret string
		return ret
	}
	return *o.Holder
}

// GetHolderOk returns a tuple with the Holder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SddMandate) GetHolderOk() (*string, bool) {
	if o == nil || o.Holder == nil {
		return nil, false
	}
	return o.Holder, true
}

// HasHolder returns a boolean if a field has been set.
func (o *SddMandate) HasHolder() bool {
	if o != nil && o.Holder != nil {
		return true
	}

	return false
}

// SetHolder gets a reference to the given string and assigns it to the Holder field.
func (o *SddMandate) SetHolder(v string) {
	o.Holder = &v
}

// GetUniqueMandateReference returns the UniqueMandateReference field value if set, zero value otherwise.
func (o *SddMandate) GetUniqueMandateReference() string {
	if o == nil || o.UniqueMandateReference == nil {
		var ret string
		return ret
	}
	return *o.UniqueMandateReference
}

// GetUniqueMandateReferenceOk returns a tuple with the UniqueMandateReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SddMandate) GetUniqueMandateReferenceOk() (*string, bool) {
	if o == nil || o.UniqueMandateReference == nil {
		return nil, false
	}
	return o.UniqueMandateReference, true
}

// HasUniqueMandateReference returns a boolean if a field has been set.
func (o *SddMandate) HasUniqueMandateReference() bool {
	if o != nil && o.UniqueMandateReference != nil {
		return true
	}

	return false
}

// SetUniqueMandateReference gets a reference to the given string and assigns it to the UniqueMandateReference field.
func (o *SddMandate) SetUniqueMandateReference(v string) {
	o.UniqueMandateReference = &v
}

func (o SddMandate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.IBAN != nil {
		toSerialize["IBAN"] = o.IBAN
	}
	if o.BIC != nil {
		toSerialize["BIC"] = o.BIC
	}
	if o.Holder != nil {
		toSerialize["holder"] = o.Holder
	}
	if o.UniqueMandateReference != nil {
		toSerialize["UniqueMandateReference"] = o.UniqueMandateReference
	}
	return json.Marshal(toSerialize)
}

type NullableSddMandate struct {
	value *SddMandate
	isSet bool
}

func (v NullableSddMandate) Get() *SddMandate {
	return v.value
}

func (v *NullableSddMandate) Set(val *SddMandate) {
	v.value = val
	v.isSet = true
}

func (v NullableSddMandate) IsSet() bool {
	return v.isSet
}

func (v *NullableSddMandate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSddMandate(val *SddMandate) *NullableSddMandate {
	return &NullableSddMandate{value: val, isSet: true}
}

func (v NullableSddMandate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSddMandate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


