/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EuPagoInit struct for EuPagoInit
type EuPagoInit struct {
	// Transaction ID. You require this ID to confirm the transaction
	Id *int64 `json:"id,omitempty"`
	// References in Format: <b>entitades.referencias</b>
	Reference *string `json:"reference,omitempty"`
}

// NewEuPagoInit instantiates a new EuPagoInit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEuPagoInit() *EuPagoInit {
	this := EuPagoInit{}
	return &this
}

// NewEuPagoInitWithDefaults instantiates a new EuPagoInit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEuPagoInitWithDefaults() *EuPagoInit {
	this := EuPagoInit{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EuPagoInit) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EuPagoInit) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EuPagoInit) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *EuPagoInit) SetId(v int64) {
	o.Id = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *EuPagoInit) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EuPagoInit) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *EuPagoInit) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *EuPagoInit) SetReference(v string) {
	o.Reference = &v
}

func (o EuPagoInit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	return json.Marshal(toSerialize)
}

type NullableEuPagoInit struct {
	value *EuPagoInit
	isSet bool
}

func (v NullableEuPagoInit) Get() *EuPagoInit {
	return v.value
}

func (v *NullableEuPagoInit) Set(val *EuPagoInit) {
	v.value = val
	v.isSet = true
}

func (v NullableEuPagoInit) IsSet() bool {
	return v.isSet
}

func (v *NullableEuPagoInit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEuPagoInit(val *EuPagoInit) *NullableEuPagoInit {
	return &NullableEuPagoInit{value: val, isSet: true}
}

func (v NullableEuPagoInit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEuPagoInit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


