/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionsHistoryInput struct for TransactionsHistoryInput
type TransactionsHistoryInput struct {
	// UTC Unix timestamp  In order to return transactions initialized after `startDate`.  If the payment account is a **SC Wallet** then this value is mandatory.
	StartDate *string `json:"startDate,omitempty"`
	// UTC Unix timestamp  In order to return transactions initialized before `endDate`.  If the payment account is a **SC Wallet** then this value is mandatory and the time span can not exceed 1 week.
	EndDate *string `json:"endDate,omitempty"`
	// UTC Unix timestamp  In order to return transactions Executed after `endDate`.  If the payment account is a **SC Wallet** then this value is mandatory and the time span can not exceed 1 week.
	ExecutionDateStart *string `json:"executionDateStart,omitempty"`
	// UTC Unix timestamp  In order to return transactions Executed before `endDate`  If the payment account is a **SC Wallet** then this value is mandatory and the time span can not exceed 1 week.
	ExecutionDateEnd *string `json:"executionDateEnd,omitempty"`
}

// NewTransactionsHistoryInput instantiates a new TransactionsHistoryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionsHistoryInput() *TransactionsHistoryInput {
	this := TransactionsHistoryInput{}
	return &this
}

// NewTransactionsHistoryInputWithDefaults instantiates a new TransactionsHistoryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsHistoryInputWithDefaults() *TransactionsHistoryInput {
	this := TransactionsHistoryInput{}
	return &this
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *TransactionsHistoryInput) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsHistoryInput) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *TransactionsHistoryInput) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *TransactionsHistoryInput) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *TransactionsHistoryInput) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsHistoryInput) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *TransactionsHistoryInput) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *TransactionsHistoryInput) SetEndDate(v string) {
	o.EndDate = &v
}

// GetExecutionDateStart returns the ExecutionDateStart field value if set, zero value otherwise.
func (o *TransactionsHistoryInput) GetExecutionDateStart() string {
	if o == nil || o.ExecutionDateStart == nil {
		var ret string
		return ret
	}
	return *o.ExecutionDateStart
}

// GetExecutionDateStartOk returns a tuple with the ExecutionDateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsHistoryInput) GetExecutionDateStartOk() (*string, bool) {
	if o == nil || o.ExecutionDateStart == nil {
		return nil, false
	}
	return o.ExecutionDateStart, true
}

// HasExecutionDateStart returns a boolean if a field has been set.
func (o *TransactionsHistoryInput) HasExecutionDateStart() bool {
	if o != nil && o.ExecutionDateStart != nil {
		return true
	}

	return false
}

// SetExecutionDateStart gets a reference to the given string and assigns it to the ExecutionDateStart field.
func (o *TransactionsHistoryInput) SetExecutionDateStart(v string) {
	o.ExecutionDateStart = &v
}

// GetExecutionDateEnd returns the ExecutionDateEnd field value if set, zero value otherwise.
func (o *TransactionsHistoryInput) GetExecutionDateEnd() string {
	if o == nil || o.ExecutionDateEnd == nil {
		var ret string
		return ret
	}
	return *o.ExecutionDateEnd
}

// GetExecutionDateEndOk returns a tuple with the ExecutionDateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsHistoryInput) GetExecutionDateEndOk() (*string, bool) {
	if o == nil || o.ExecutionDateEnd == nil {
		return nil, false
	}
	return o.ExecutionDateEnd, true
}

// HasExecutionDateEnd returns a boolean if a field has been set.
func (o *TransactionsHistoryInput) HasExecutionDateEnd() bool {
	if o != nil && o.ExecutionDateEnd != nil {
		return true
	}

	return false
}

// SetExecutionDateEnd gets a reference to the given string and assigns it to the ExecutionDateEnd field.
func (o *TransactionsHistoryInput) SetExecutionDateEnd(v string) {
	o.ExecutionDateEnd = &v
}

func (o TransactionsHistoryInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.ExecutionDateStart != nil {
		toSerialize["executionDateStart"] = o.ExecutionDateStart
	}
	if o.ExecutionDateEnd != nil {
		toSerialize["executionDateEnd"] = o.ExecutionDateEnd
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionsHistoryInput struct {
	value *TransactionsHistoryInput
	isSet bool
}

func (v NullableTransactionsHistoryInput) Get() *TransactionsHistoryInput {
	return v.value
}

func (v *NullableTransactionsHistoryInput) Set(val *TransactionsHistoryInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsHistoryInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsHistoryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsHistoryInput(val *TransactionsHistoryInput) *NullableTransactionsHistoryInput {
	return &NullableTransactionsHistoryInput{value: val, isSet: true}
}

func (v NullableTransactionsHistoryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsHistoryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


