/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SignDocumentInitOutput struct for SignDocumentInitOutput
type SignDocumentInitOutput struct {
	// Payment token to use as GET parameter when redirecting your user to the WEBKIT.  so even if the user comes back to your error page (if the user cancelled for example),   you can still submit the same token to the WEBKIT.
	SignDocument *string `json:"signDocument,omitempty"`
	Error *Error `json:"error,omitempty"`
}

// NewSignDocumentInitOutput instantiates a new SignDocumentInitOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignDocumentInitOutput() *SignDocumentInitOutput {
	this := SignDocumentInitOutput{}
	return &this
}

// NewSignDocumentInitOutputWithDefaults instantiates a new SignDocumentInitOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignDocumentInitOutputWithDefaults() *SignDocumentInitOutput {
	this := SignDocumentInitOutput{}
	return &this
}

// GetSignDocument returns the SignDocument field value if set, zero value otherwise.
func (o *SignDocumentInitOutput) GetSignDocument() string {
	if o == nil || o.SignDocument == nil {
		var ret string
		return ret
	}
	return *o.SignDocument
}

// GetSignDocumentOk returns a tuple with the SignDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignDocumentInitOutput) GetSignDocumentOk() (*string, bool) {
	if o == nil || o.SignDocument == nil {
		return nil, false
	}
	return o.SignDocument, true
}

// HasSignDocument returns a boolean if a field has been set.
func (o *SignDocumentInitOutput) HasSignDocument() bool {
	if o != nil && o.SignDocument != nil {
		return true
	}

	return false
}

// SetSignDocument gets a reference to the given string and assigns it to the SignDocument field.
func (o *SignDocumentInitOutput) SetSignDocument(v string) {
	o.SignDocument = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SignDocumentInitOutput) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignDocumentInitOutput) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SignDocumentInitOutput) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *SignDocumentInitOutput) SetError(v Error) {
	o.Error = &v
}

func (o SignDocumentInitOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SignDocument != nil {
		toSerialize["signDocument"] = o.SignDocument
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableSignDocumentInitOutput struct {
	value *SignDocumentInitOutput
	isSet bool
}

func (v NullableSignDocumentInitOutput) Get() *SignDocumentInitOutput {
	return v.value
}

func (v *NullableSignDocumentInitOutput) Set(val *SignDocumentInitOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableSignDocumentInitOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableSignDocumentInitOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignDocumentInitOutput(val *SignDocumentInitOutput) *NullableSignDocumentInitOutput {
	return &NullableSignDocumentInitOutput{value: val, isSet: true}
}

func (v NullableSignDocumentInitOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignDocumentInitOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


