/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccountDocumentsOutput struct for AccountDocumentsOutput
type AccountDocumentsOutput struct {
	// List of documents that changed since the entry date.
	Documents []Document `json:"documents,omitempty"`
	Error *Error `json:"error,omitempty"`
}

// NewAccountDocumentsOutput instantiates a new AccountDocumentsOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountDocumentsOutput() *AccountDocumentsOutput {
	this := AccountDocumentsOutput{}
	return &this
}

// NewAccountDocumentsOutputWithDefaults instantiates a new AccountDocumentsOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountDocumentsOutputWithDefaults() *AccountDocumentsOutput {
	this := AccountDocumentsOutput{}
	return &this
}

// GetDocuments returns the Documents field value if set, zero value otherwise.
func (o *AccountDocumentsOutput) GetDocuments() []Document {
	if o == nil || o.Documents == nil {
		var ret []Document
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDocumentsOutput) GetDocumentsOk() ([]Document, bool) {
	if o == nil || o.Documents == nil {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *AccountDocumentsOutput) HasDocuments() bool {
	if o != nil && o.Documents != nil {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []Document and assigns it to the Documents field.
func (o *AccountDocumentsOutput) SetDocuments(v []Document) {
	o.Documents = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *AccountDocumentsOutput) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDocumentsOutput) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *AccountDocumentsOutput) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *AccountDocumentsOutput) SetError(v Error) {
	o.Error = &v
}

func (o AccountDocumentsOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Documents != nil {
		toSerialize["documents"] = o.Documents
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableAccountDocumentsOutput struct {
	value *AccountDocumentsOutput
	isSet bool
}

func (v NullableAccountDocumentsOutput) Get() *AccountDocumentsOutput {
	return v.value
}

func (v *NullableAccountDocumentsOutput) Set(val *AccountDocumentsOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountDocumentsOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountDocumentsOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountDocumentsOutput(val *AccountDocumentsOutput) *NullableAccountDocumentsOutput {
	return &NullableAccountDocumentsOutput{value: val, isSet: true}
}

func (v NullableAccountDocumentsOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountDocumentsOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


