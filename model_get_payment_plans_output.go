/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetPaymentPlansOutput struct for GetPaymentPlansOutput
type GetPaymentPlansOutput struct {
	// List of actived BNPL payment plans
	PaymentPlans []PaymentPlan `json:"paymentPlans,omitempty"`
	Error *Error `json:"error,omitempty"`
}

// NewGetPaymentPlansOutput instantiates a new GetPaymentPlansOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPaymentPlansOutput() *GetPaymentPlansOutput {
	this := GetPaymentPlansOutput{}
	return &this
}

// NewGetPaymentPlansOutputWithDefaults instantiates a new GetPaymentPlansOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPaymentPlansOutputWithDefaults() *GetPaymentPlansOutput {
	this := GetPaymentPlansOutput{}
	return &this
}

// GetPaymentPlans returns the PaymentPlans field value if set, zero value otherwise.
func (o *GetPaymentPlansOutput) GetPaymentPlans() []PaymentPlan {
	if o == nil || o.PaymentPlans == nil {
		var ret []PaymentPlan
		return ret
	}
	return o.PaymentPlans
}

// GetPaymentPlansOk returns a tuple with the PaymentPlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPaymentPlansOutput) GetPaymentPlansOk() ([]PaymentPlan, bool) {
	if o == nil || o.PaymentPlans == nil {
		return nil, false
	}
	return o.PaymentPlans, true
}

// HasPaymentPlans returns a boolean if a field has been set.
func (o *GetPaymentPlansOutput) HasPaymentPlans() bool {
	if o != nil && o.PaymentPlans != nil {
		return true
	}

	return false
}

// SetPaymentPlans gets a reference to the given []PaymentPlan and assigns it to the PaymentPlans field.
func (o *GetPaymentPlansOutput) SetPaymentPlans(v []PaymentPlan) {
	o.PaymentPlans = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *GetPaymentPlansOutput) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPaymentPlansOutput) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *GetPaymentPlansOutput) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *GetPaymentPlansOutput) SetError(v Error) {
	o.Error = &v
}

func (o GetPaymentPlansOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PaymentPlans != nil {
		toSerialize["paymentPlans"] = o.PaymentPlans
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableGetPaymentPlansOutput struct {
	value *GetPaymentPlansOutput
	isSet bool
}

func (v NullableGetPaymentPlansOutput) Get() *GetPaymentPlansOutput {
	return v.value
}

func (v *NullableGetPaymentPlansOutput) Set(val *GetPaymentPlansOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPaymentPlansOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPaymentPlansOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPaymentPlansOutput(val *GetPaymentPlansOutput) *NullableGetPaymentPlansOutput {
	return &NullableGetPaymentPlansOutput{value: val, isSet: true}
}

func (v NullableGetPaymentPlansOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPaymentPlansOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


