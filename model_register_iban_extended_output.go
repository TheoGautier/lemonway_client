/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisterIBANExtendedOutput struct for RegisterIBANExtendedOutput
type RegisterIBANExtendedOutput struct {
	// IBAN ID
	IbanId *int64 `json:"ibanId,omitempty"`
	// IBAN Status<br/>1 = None.<br/>2 = Internal.<br/>3 = Not used.<br/>4 = Waiting to be verified by Lemon Way.<br/>5 = Activated.<br/>6 = Rejected by the bank.<br/>7 = Rejected, no owner.<br/>8 = Deactivated.<br/>9 = Rejected.<br/>
	Status *int32 `json:"status,omitempty"`
	Error *Error `json:"error,omitempty"`
}

// NewRegisterIBANExtendedOutput instantiates a new RegisterIBANExtendedOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterIBANExtendedOutput() *RegisterIBANExtendedOutput {
	this := RegisterIBANExtendedOutput{}
	return &this
}

// NewRegisterIBANExtendedOutputWithDefaults instantiates a new RegisterIBANExtendedOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterIBANExtendedOutputWithDefaults() *RegisterIBANExtendedOutput {
	this := RegisterIBANExtendedOutput{}
	return &this
}

// GetIbanId returns the IbanId field value if set, zero value otherwise.
func (o *RegisterIBANExtendedOutput) GetIbanId() int64 {
	if o == nil || o.IbanId == nil {
		var ret int64
		return ret
	}
	return *o.IbanId
}

// GetIbanIdOk returns a tuple with the IbanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIBANExtendedOutput) GetIbanIdOk() (*int64, bool) {
	if o == nil || o.IbanId == nil {
		return nil, false
	}
	return o.IbanId, true
}

// HasIbanId returns a boolean if a field has been set.
func (o *RegisterIBANExtendedOutput) HasIbanId() bool {
	if o != nil && o.IbanId != nil {
		return true
	}

	return false
}

// SetIbanId gets a reference to the given int64 and assigns it to the IbanId field.
func (o *RegisterIBANExtendedOutput) SetIbanId(v int64) {
	o.IbanId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RegisterIBANExtendedOutput) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIBANExtendedOutput) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RegisterIBANExtendedOutput) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *RegisterIBANExtendedOutput) SetStatus(v int32) {
	o.Status = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *RegisterIBANExtendedOutput) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIBANExtendedOutput) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *RegisterIBANExtendedOutput) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *RegisterIBANExtendedOutput) SetError(v Error) {
	o.Error = &v
}

func (o RegisterIBANExtendedOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IbanId != nil {
		toSerialize["ibanId"] = o.IbanId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterIBANExtendedOutput struct {
	value *RegisterIBANExtendedOutput
	isSet bool
}

func (v NullableRegisterIBANExtendedOutput) Get() *RegisterIBANExtendedOutput {
	return v.value
}

func (v *NullableRegisterIBANExtendedOutput) Set(val *RegisterIBANExtendedOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterIBANExtendedOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterIBANExtendedOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterIBANExtendedOutput(val *RegisterIBANExtendedOutput) *NullableRegisterIBANExtendedOutput {
	return &NullableRegisterIBANExtendedOutput{value: val, isSet: true}
}

func (v NullableRegisterIBANExtendedOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterIBANExtendedOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


