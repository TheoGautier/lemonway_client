/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CancelMoneyInOutput struct for CancelMoneyInOutput
type CancelMoneyInOutput struct {
	Transaction *TransactionIn `json:"transaction,omitempty"`
	Error *Error `json:"error,omitempty"`
}

// NewCancelMoneyInOutput instantiates a new CancelMoneyInOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelMoneyInOutput() *CancelMoneyInOutput {
	this := CancelMoneyInOutput{}
	return &this
}

// NewCancelMoneyInOutputWithDefaults instantiates a new CancelMoneyInOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelMoneyInOutputWithDefaults() *CancelMoneyInOutput {
	this := CancelMoneyInOutput{}
	return &this
}

// GetTransaction returns the Transaction field value if set, zero value otherwise.
func (o *CancelMoneyInOutput) GetTransaction() TransactionIn {
	if o == nil || o.Transaction == nil {
		var ret TransactionIn
		return ret
	}
	return *o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelMoneyInOutput) GetTransactionOk() (*TransactionIn, bool) {
	if o == nil || o.Transaction == nil {
		return nil, false
	}
	return o.Transaction, true
}

// HasTransaction returns a boolean if a field has been set.
func (o *CancelMoneyInOutput) HasTransaction() bool {
	if o != nil && o.Transaction != nil {
		return true
	}

	return false
}

// SetTransaction gets a reference to the given TransactionIn and assigns it to the Transaction field.
func (o *CancelMoneyInOutput) SetTransaction(v TransactionIn) {
	o.Transaction = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *CancelMoneyInOutput) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelMoneyInOutput) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *CancelMoneyInOutput) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *CancelMoneyInOutput) SetError(v Error) {
	o.Error = &v
}

func (o CancelMoneyInOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transaction != nil {
		toSerialize["transaction"] = o.Transaction
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableCancelMoneyInOutput struct {
	value *CancelMoneyInOutput
	isSet bool
}

func (v NullableCancelMoneyInOutput) Get() *CancelMoneyInOutput {
	return v.value
}

func (v *NullableCancelMoneyInOutput) Set(val *CancelMoneyInOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelMoneyInOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelMoneyInOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelMoneyInOutput(val *CancelMoneyInOutput) *NullableCancelMoneyInOutput {
	return &NullableCancelMoneyInOutput{value: val, isSet: true}
}

func (v NullableCancelMoneyInOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelMoneyInOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


