/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BnplInfo struct for BnplInfo
type BnplInfo struct {
	// Payment Plan ID
	PaymentPlanId *int64 `json:"paymentPlanId,omitempty"`
	// Payment plan type.
	Type *string `json:"type,omitempty"`
	// Second installment payment date.  Format: yyyy-MM-dd
	SecondInstallmentPaymentDate *string `json:"secondInstallmentPaymentDate,omitempty"`
	// Deferred payment date.  Format: yyyy-MM-dd
	DeferredPaymentDate *string `json:"deferredPaymentDate,omitempty"`
}

// NewBnplInfo instantiates a new BnplInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBnplInfo() *BnplInfo {
	this := BnplInfo{}
	return &this
}

// NewBnplInfoWithDefaults instantiates a new BnplInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBnplInfoWithDefaults() *BnplInfo {
	this := BnplInfo{}
	return &this
}

// GetPaymentPlanId returns the PaymentPlanId field value if set, zero value otherwise.
func (o *BnplInfo) GetPaymentPlanId() int64 {
	if o == nil || o.PaymentPlanId == nil {
		var ret int64
		return ret
	}
	return *o.PaymentPlanId
}

// GetPaymentPlanIdOk returns a tuple with the PaymentPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BnplInfo) GetPaymentPlanIdOk() (*int64, bool) {
	if o == nil || o.PaymentPlanId == nil {
		return nil, false
	}
	return o.PaymentPlanId, true
}

// HasPaymentPlanId returns a boolean if a field has been set.
func (o *BnplInfo) HasPaymentPlanId() bool {
	if o != nil && o.PaymentPlanId != nil {
		return true
	}

	return false
}

// SetPaymentPlanId gets a reference to the given int64 and assigns it to the PaymentPlanId field.
func (o *BnplInfo) SetPaymentPlanId(v int64) {
	o.PaymentPlanId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BnplInfo) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BnplInfo) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BnplInfo) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BnplInfo) SetType(v string) {
	o.Type = &v
}

// GetSecondInstallmentPaymentDate returns the SecondInstallmentPaymentDate field value if set, zero value otherwise.
func (o *BnplInfo) GetSecondInstallmentPaymentDate() string {
	if o == nil || o.SecondInstallmentPaymentDate == nil {
		var ret string
		return ret
	}
	return *o.SecondInstallmentPaymentDate
}

// GetSecondInstallmentPaymentDateOk returns a tuple with the SecondInstallmentPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BnplInfo) GetSecondInstallmentPaymentDateOk() (*string, bool) {
	if o == nil || o.SecondInstallmentPaymentDate == nil {
		return nil, false
	}
	return o.SecondInstallmentPaymentDate, true
}

// HasSecondInstallmentPaymentDate returns a boolean if a field has been set.
func (o *BnplInfo) HasSecondInstallmentPaymentDate() bool {
	if o != nil && o.SecondInstallmentPaymentDate != nil {
		return true
	}

	return false
}

// SetSecondInstallmentPaymentDate gets a reference to the given string and assigns it to the SecondInstallmentPaymentDate field.
func (o *BnplInfo) SetSecondInstallmentPaymentDate(v string) {
	o.SecondInstallmentPaymentDate = &v
}

// GetDeferredPaymentDate returns the DeferredPaymentDate field value if set, zero value otherwise.
func (o *BnplInfo) GetDeferredPaymentDate() string {
	if o == nil || o.DeferredPaymentDate == nil {
		var ret string
		return ret
	}
	return *o.DeferredPaymentDate
}

// GetDeferredPaymentDateOk returns a tuple with the DeferredPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BnplInfo) GetDeferredPaymentDateOk() (*string, bool) {
	if o == nil || o.DeferredPaymentDate == nil {
		return nil, false
	}
	return o.DeferredPaymentDate, true
}

// HasDeferredPaymentDate returns a boolean if a field has been set.
func (o *BnplInfo) HasDeferredPaymentDate() bool {
	if o != nil && o.DeferredPaymentDate != nil {
		return true
	}

	return false
}

// SetDeferredPaymentDate gets a reference to the given string and assigns it to the DeferredPaymentDate field.
func (o *BnplInfo) SetDeferredPaymentDate(v string) {
	o.DeferredPaymentDate = &v
}

func (o BnplInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PaymentPlanId != nil {
		toSerialize["paymentPlanId"] = o.PaymentPlanId
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.SecondInstallmentPaymentDate != nil {
		toSerialize["secondInstallmentPaymentDate"] = o.SecondInstallmentPaymentDate
	}
	if o.DeferredPaymentDate != nil {
		toSerialize["deferredPaymentDate"] = o.DeferredPaymentDate
	}
	return json.Marshal(toSerialize)
}

type NullableBnplInfo struct {
	value *BnplInfo
	isSet bool
}

func (v NullableBnplInfo) Get() *BnplInfo {
	return v.value
}

func (v *NullableBnplInfo) Set(val *BnplInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBnplInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBnplInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBnplInfo(val *BnplInfo) *NullableBnplInfo {
	return &NullableBnplInfo{value: val, isSet: true}
}

func (v NullableBnplInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBnplInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


