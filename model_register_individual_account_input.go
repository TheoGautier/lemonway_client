/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisterIndividualAccountInput struct for RegisterIndividualAccountInput
type RegisterIndividualAccountInput struct {
	// Payment account ID that you use to identify the customer.Choose your unique number.<br /><b>Note:</b> If you plan to credit payments accounts  by fund transfer, please use short alphanumeric payment account identifiers (max 20 char.).   Your customers will have to write their payment account identifier in the transfer label/comment, a label of more that 20 characters could be cut when passing the the banking system.
	AccountId string `json:"accountId"`
	// Unique Email
	Email string `json:"email"`
	// Client title
	Title *string `json:"title,omitempty"`
	// Client first name
	FirstName string `json:"firstName"`
	// Client last name
	LastName string `json:"lastName"`
	Adresse *Address `json:"adresse,omitempty"`
	Birth *Birth `json:"birth,omitempty"`
	// Client nationality, using ISO 3166-1 alpha-3 format  Please separate multiple nationalities with a comma
	Nationality string `json:"nationality"`
	// Phone number with MSISDN format: international number with country code without \"00\" neither \"+\".
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// Mobile phone number with MSISDN format: international number with country code without \"00\" neither \"+\".   This will be used by default when eletronically signing documents.
	MobileNumber *string `json:"mobileNumber,omitempty"`
	// For crowdfunding/loan platforms, indicates if the wallet is created for a debtor.
	IsDebtor *bool `json:"isDebtor,omitempty"`
	// Indicates if the payment account is created for a Payer or a Beneficiary.  1: Payer (default)  2: Beneficiary
	PayerOrBeneficiary int32 `json:"payerOrBeneficiary"`
	// Indicates if the payment account is for a one-time customer.   If yes, the payment account will be created with status 14, allowing only one payment.   The maximum amount will be defined with Lemonway.
	IsOneTimeCustomerAccount *bool `json:"isOneTimeCustomerAccount,omitempty"`
	// **Note:** This option is available depending on your contract  True, in case this option is enabled in your contract.  Otherwise it will be considered a Client Wallet.
	IsTechnicalAccount *bool `json:"isTechnicalAccount,omitempty"`
	// 
	IsUltimateBeneficialOwner *bool `json:"isUltimateBeneficialOwner,omitempty"`
}

// NewRegisterIndividualAccountInput instantiates a new RegisterIndividualAccountInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterIndividualAccountInput(accountId string, email string, firstName string, lastName string, nationality string, payerOrBeneficiary int32) *RegisterIndividualAccountInput {
	this := RegisterIndividualAccountInput{}
	this.AccountId = accountId
	this.Email = email
	this.FirstName = firstName
	this.LastName = lastName
	this.Nationality = nationality
	this.PayerOrBeneficiary = payerOrBeneficiary
	return &this
}

// NewRegisterIndividualAccountInputWithDefaults instantiates a new RegisterIndividualAccountInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterIndividualAccountInputWithDefaults() *RegisterIndividualAccountInput {
	this := RegisterIndividualAccountInput{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *RegisterIndividualAccountInput) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *RegisterIndividualAccountInput) SetAccountId(v string) {
	o.AccountId = v
}

// GetEmail returns the Email field value
func (o *RegisterIndividualAccountInput) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *RegisterIndividualAccountInput) SetEmail(v string) {
	o.Email = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RegisterIndividualAccountInput) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RegisterIndividualAccountInput) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RegisterIndividualAccountInput) SetTitle(v string) {
	o.Title = &v
}

// GetFirstName returns the FirstName field value
func (o *RegisterIndividualAccountInput) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *RegisterIndividualAccountInput) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *RegisterIndividualAccountInput) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *RegisterIndividualAccountInput) SetLastName(v string) {
	o.LastName = v
}

// GetAdresse returns the Adresse field value if set, zero value otherwise.
func (o *RegisterIndividualAccountInput) GetAdresse() Address {
	if o == nil || o.Adresse == nil {
		var ret Address
		return ret
	}
	return *o.Adresse
}

// GetAdresseOk returns a tuple with the Adresse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetAdresseOk() (*Address, bool) {
	if o == nil || o.Adresse == nil {
		return nil, false
	}
	return o.Adresse, true
}

// HasAdresse returns a boolean if a field has been set.
func (o *RegisterIndividualAccountInput) HasAdresse() bool {
	if o != nil && o.Adresse != nil {
		return true
	}

	return false
}

// SetAdresse gets a reference to the given Address and assigns it to the Adresse field.
func (o *RegisterIndividualAccountInput) SetAdresse(v Address) {
	o.Adresse = &v
}

// GetBirth returns the Birth field value if set, zero value otherwise.
func (o *RegisterIndividualAccountInput) GetBirth() Birth {
	if o == nil || o.Birth == nil {
		var ret Birth
		return ret
	}
	return *o.Birth
}

// GetBirthOk returns a tuple with the Birth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetBirthOk() (*Birth, bool) {
	if o == nil || o.Birth == nil {
		return nil, false
	}
	return o.Birth, true
}

// HasBirth returns a boolean if a field has been set.
func (o *RegisterIndividualAccountInput) HasBirth() bool {
	if o != nil && o.Birth != nil {
		return true
	}

	return false
}

// SetBirth gets a reference to the given Birth and assigns it to the Birth field.
func (o *RegisterIndividualAccountInput) SetBirth(v Birth) {
	o.Birth = &v
}

// GetNationality returns the Nationality field value
func (o *RegisterIndividualAccountInput) GetNationality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nationality
}

// GetNationalityOk returns a tuple with the Nationality field value
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetNationalityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nationality, true
}

// SetNationality sets field value
func (o *RegisterIndividualAccountInput) SetNationality(v string) {
	o.Nationality = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *RegisterIndividualAccountInput) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *RegisterIndividualAccountInput) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *RegisterIndividualAccountInput) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetMobileNumber returns the MobileNumber field value if set, zero value otherwise.
func (o *RegisterIndividualAccountInput) GetMobileNumber() string {
	if o == nil || o.MobileNumber == nil {
		var ret string
		return ret
	}
	return *o.MobileNumber
}

// GetMobileNumberOk returns a tuple with the MobileNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetMobileNumberOk() (*string, bool) {
	if o == nil || o.MobileNumber == nil {
		return nil, false
	}
	return o.MobileNumber, true
}

// HasMobileNumber returns a boolean if a field has been set.
func (o *RegisterIndividualAccountInput) HasMobileNumber() bool {
	if o != nil && o.MobileNumber != nil {
		return true
	}

	return false
}

// SetMobileNumber gets a reference to the given string and assigns it to the MobileNumber field.
func (o *RegisterIndividualAccountInput) SetMobileNumber(v string) {
	o.MobileNumber = &v
}

// GetIsDebtor returns the IsDebtor field value if set, zero value otherwise.
func (o *RegisterIndividualAccountInput) GetIsDebtor() bool {
	if o == nil || o.IsDebtor == nil {
		var ret bool
		return ret
	}
	return *o.IsDebtor
}

// GetIsDebtorOk returns a tuple with the IsDebtor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetIsDebtorOk() (*bool, bool) {
	if o == nil || o.IsDebtor == nil {
		return nil, false
	}
	return o.IsDebtor, true
}

// HasIsDebtor returns a boolean if a field has been set.
func (o *RegisterIndividualAccountInput) HasIsDebtor() bool {
	if o != nil && o.IsDebtor != nil {
		return true
	}

	return false
}

// SetIsDebtor gets a reference to the given bool and assigns it to the IsDebtor field.
func (o *RegisterIndividualAccountInput) SetIsDebtor(v bool) {
	o.IsDebtor = &v
}

// GetPayerOrBeneficiary returns the PayerOrBeneficiary field value
func (o *RegisterIndividualAccountInput) GetPayerOrBeneficiary() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PayerOrBeneficiary
}

// GetPayerOrBeneficiaryOk returns a tuple with the PayerOrBeneficiary field value
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetPayerOrBeneficiaryOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayerOrBeneficiary, true
}

// SetPayerOrBeneficiary sets field value
func (o *RegisterIndividualAccountInput) SetPayerOrBeneficiary(v int32) {
	o.PayerOrBeneficiary = v
}

// GetIsOneTimeCustomerAccount returns the IsOneTimeCustomerAccount field value if set, zero value otherwise.
func (o *RegisterIndividualAccountInput) GetIsOneTimeCustomerAccount() bool {
	if o == nil || o.IsOneTimeCustomerAccount == nil {
		var ret bool
		return ret
	}
	return *o.IsOneTimeCustomerAccount
}

// GetIsOneTimeCustomerAccountOk returns a tuple with the IsOneTimeCustomerAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetIsOneTimeCustomerAccountOk() (*bool, bool) {
	if o == nil || o.IsOneTimeCustomerAccount == nil {
		return nil, false
	}
	return o.IsOneTimeCustomerAccount, true
}

// HasIsOneTimeCustomerAccount returns a boolean if a field has been set.
func (o *RegisterIndividualAccountInput) HasIsOneTimeCustomerAccount() bool {
	if o != nil && o.IsOneTimeCustomerAccount != nil {
		return true
	}

	return false
}

// SetIsOneTimeCustomerAccount gets a reference to the given bool and assigns it to the IsOneTimeCustomerAccount field.
func (o *RegisterIndividualAccountInput) SetIsOneTimeCustomerAccount(v bool) {
	o.IsOneTimeCustomerAccount = &v
}

// GetIsTechnicalAccount returns the IsTechnicalAccount field value if set, zero value otherwise.
func (o *RegisterIndividualAccountInput) GetIsTechnicalAccount() bool {
	if o == nil || o.IsTechnicalAccount == nil {
		var ret bool
		return ret
	}
	return *o.IsTechnicalAccount
}

// GetIsTechnicalAccountOk returns a tuple with the IsTechnicalAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetIsTechnicalAccountOk() (*bool, bool) {
	if o == nil || o.IsTechnicalAccount == nil {
		return nil, false
	}
	return o.IsTechnicalAccount, true
}

// HasIsTechnicalAccount returns a boolean if a field has been set.
func (o *RegisterIndividualAccountInput) HasIsTechnicalAccount() bool {
	if o != nil && o.IsTechnicalAccount != nil {
		return true
	}

	return false
}

// SetIsTechnicalAccount gets a reference to the given bool and assigns it to the IsTechnicalAccount field.
func (o *RegisterIndividualAccountInput) SetIsTechnicalAccount(v bool) {
	o.IsTechnicalAccount = &v
}

// GetIsUltimateBeneficialOwner returns the IsUltimateBeneficialOwner field value if set, zero value otherwise.
func (o *RegisterIndividualAccountInput) GetIsUltimateBeneficialOwner() bool {
	if o == nil || o.IsUltimateBeneficialOwner == nil {
		var ret bool
		return ret
	}
	return *o.IsUltimateBeneficialOwner
}

// GetIsUltimateBeneficialOwnerOk returns a tuple with the IsUltimateBeneficialOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIndividualAccountInput) GetIsUltimateBeneficialOwnerOk() (*bool, bool) {
	if o == nil || o.IsUltimateBeneficialOwner == nil {
		return nil, false
	}
	return o.IsUltimateBeneficialOwner, true
}

// HasIsUltimateBeneficialOwner returns a boolean if a field has been set.
func (o *RegisterIndividualAccountInput) HasIsUltimateBeneficialOwner() bool {
	if o != nil && o.IsUltimateBeneficialOwner != nil {
		return true
	}

	return false
}

// SetIsUltimateBeneficialOwner gets a reference to the given bool and assigns it to the IsUltimateBeneficialOwner field.
func (o *RegisterIndividualAccountInput) SetIsUltimateBeneficialOwner(v bool) {
	o.IsUltimateBeneficialOwner = &v
}

func (o RegisterIndividualAccountInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["firstName"] = o.FirstName
	}
	if true {
		toSerialize["lastName"] = o.LastName
	}
	if o.Adresse != nil {
		toSerialize["adresse"] = o.Adresse
	}
	if o.Birth != nil {
		toSerialize["birth"] = o.Birth
	}
	if true {
		toSerialize["nationality"] = o.Nationality
	}
	if o.PhoneNumber != nil {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if o.MobileNumber != nil {
		toSerialize["mobileNumber"] = o.MobileNumber
	}
	if o.IsDebtor != nil {
		toSerialize["isDebtor"] = o.IsDebtor
	}
	if true {
		toSerialize["payerOrBeneficiary"] = o.PayerOrBeneficiary
	}
	if o.IsOneTimeCustomerAccount != nil {
		toSerialize["isOneTimeCustomerAccount"] = o.IsOneTimeCustomerAccount
	}
	if o.IsTechnicalAccount != nil {
		toSerialize["isTechnicalAccount"] = o.IsTechnicalAccount
	}
	if o.IsUltimateBeneficialOwner != nil {
		toSerialize["isUltimateBeneficialOwner"] = o.IsUltimateBeneficialOwner
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterIndividualAccountInput struct {
	value *RegisterIndividualAccountInput
	isSet bool
}

func (v NullableRegisterIndividualAccountInput) Get() *RegisterIndividualAccountInput {
	return v.value
}

func (v *NullableRegisterIndividualAccountInput) Set(val *RegisterIndividualAccountInput) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterIndividualAccountInput) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterIndividualAccountInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterIndividualAccountInput(val *RegisterIndividualAccountInput) *NullableRegisterIndividualAccountInput {
	return &NullableRegisterIndividualAccountInput{value: val, isSet: true}
}

func (v NullableRegisterIndividualAccountInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterIndividualAccountInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


