/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Limits struct for Limits
type Limits struct {
	// Total Money-In number allowed for this account
	TotalMoneyInAllowed *int64 `json:"totalMoneyInAllowed,omitempty"`
	// Total Money-In amount allowed for this wallet
	AmountMoneyInAllowed *float64 `json:"amountMoneyInAllowed,omitempty"`
}

// NewLimits instantiates a new Limits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimits() *Limits {
	this := Limits{}
	return &this
}

// NewLimitsWithDefaults instantiates a new Limits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitsWithDefaults() *Limits {
	this := Limits{}
	return &this
}

// GetTotalMoneyInAllowed returns the TotalMoneyInAllowed field value if set, zero value otherwise.
func (o *Limits) GetTotalMoneyInAllowed() int64 {
	if o == nil || o.TotalMoneyInAllowed == nil {
		var ret int64
		return ret
	}
	return *o.TotalMoneyInAllowed
}

// GetTotalMoneyInAllowedOk returns a tuple with the TotalMoneyInAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Limits) GetTotalMoneyInAllowedOk() (*int64, bool) {
	if o == nil || o.TotalMoneyInAllowed == nil {
		return nil, false
	}
	return o.TotalMoneyInAllowed, true
}

// HasTotalMoneyInAllowed returns a boolean if a field has been set.
func (o *Limits) HasTotalMoneyInAllowed() bool {
	if o != nil && o.TotalMoneyInAllowed != nil {
		return true
	}

	return false
}

// SetTotalMoneyInAllowed gets a reference to the given int64 and assigns it to the TotalMoneyInAllowed field.
func (o *Limits) SetTotalMoneyInAllowed(v int64) {
	o.TotalMoneyInAllowed = &v
}

// GetAmountMoneyInAllowed returns the AmountMoneyInAllowed field value if set, zero value otherwise.
func (o *Limits) GetAmountMoneyInAllowed() float64 {
	if o == nil || o.AmountMoneyInAllowed == nil {
		var ret float64
		return ret
	}
	return *o.AmountMoneyInAllowed
}

// GetAmountMoneyInAllowedOk returns a tuple with the AmountMoneyInAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Limits) GetAmountMoneyInAllowedOk() (*float64, bool) {
	if o == nil || o.AmountMoneyInAllowed == nil {
		return nil, false
	}
	return o.AmountMoneyInAllowed, true
}

// HasAmountMoneyInAllowed returns a boolean if a field has been set.
func (o *Limits) HasAmountMoneyInAllowed() bool {
	if o != nil && o.AmountMoneyInAllowed != nil {
		return true
	}

	return false
}

// SetAmountMoneyInAllowed gets a reference to the given float64 and assigns it to the AmountMoneyInAllowed field.
func (o *Limits) SetAmountMoneyInAllowed(v float64) {
	o.AmountMoneyInAllowed = &v
}

func (o Limits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalMoneyInAllowed != nil {
		toSerialize["totalMoneyInAllowed"] = o.TotalMoneyInAllowed
	}
	if o.AmountMoneyInAllowed != nil {
		toSerialize["amountMoneyInAllowed"] = o.AmountMoneyInAllowed
	}
	return json.Marshal(toSerialize)
}

type NullableLimits struct {
	value *Limits
	isSet bool
}

func (v NullableLimits) Get() *Limits {
	return v.value
}

func (v *NullableLimits) Set(val *Limits) {
	v.value = val
	v.isSet = true
}

func (v NullableLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimits(val *Limits) *NullableLimits {
	return &NullableLimits{value: val, isSet: true}
}

func (v NullableLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


