/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetMoneyInBanksInput struct for GetMoneyInBanksInput
type GetMoneyInBanksInput struct {
	// Comma separated string of ISO Alpha-2 country codes.  Available country codes include:    - France (FR)     - Spain (ES)     - Italy (IT)     - Germany (DE)     - Portugal (PT)
	CountryCodes *string `json:"countryCodes,omitempty"`
}

// NewGetMoneyInBanksInput instantiates a new GetMoneyInBanksInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMoneyInBanksInput() *GetMoneyInBanksInput {
	this := GetMoneyInBanksInput{}
	return &this
}

// NewGetMoneyInBanksInputWithDefaults instantiates a new GetMoneyInBanksInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMoneyInBanksInputWithDefaults() *GetMoneyInBanksInput {
	this := GetMoneyInBanksInput{}
	return &this
}

// GetCountryCodes returns the CountryCodes field value if set, zero value otherwise.
func (o *GetMoneyInBanksInput) GetCountryCodes() string {
	if o == nil || o.CountryCodes == nil {
		var ret string
		return ret
	}
	return *o.CountryCodes
}

// GetCountryCodesOk returns a tuple with the CountryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMoneyInBanksInput) GetCountryCodesOk() (*string, bool) {
	if o == nil || o.CountryCodes == nil {
		return nil, false
	}
	return o.CountryCodes, true
}

// HasCountryCodes returns a boolean if a field has been set.
func (o *GetMoneyInBanksInput) HasCountryCodes() bool {
	if o != nil && o.CountryCodes != nil {
		return true
	}

	return false
}

// SetCountryCodes gets a reference to the given string and assigns it to the CountryCodes field.
func (o *GetMoneyInBanksInput) SetCountryCodes(v string) {
	o.CountryCodes = &v
}

func (o GetMoneyInBanksInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CountryCodes != nil {
		toSerialize["countryCodes"] = o.CountryCodes
	}
	return json.Marshal(toSerialize)
}

type NullableGetMoneyInBanksInput struct {
	value *GetMoneyInBanksInput
	isSet bool
}

func (v NullableGetMoneyInBanksInput) Get() *GetMoneyInBanksInput {
	return v.value
}

func (v *NullableGetMoneyInBanksInput) Set(val *GetMoneyInBanksInput) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMoneyInBanksInput) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMoneyInBanksInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMoneyInBanksInput(val *GetMoneyInBanksInput) *NullableGetMoneyInBanksInput {
	return &NullableGetMoneyInBanksInput{value: val, isSet: true}
}

func (v NullableGetMoneyInBanksInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMoneyInBanksInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


