/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PrivateData Data with multiple fields that you can associate to a payment and that you can search with GetPaymentDetails.
type PrivateData struct {
	// Up to 20 fields of 256 maximum length
	Value []string `json:"value,omitempty"`
}

// NewPrivateData instantiates a new PrivateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateData() *PrivateData {
	this := PrivateData{}
	return &this
}

// NewPrivateDataWithDefaults instantiates a new PrivateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateDataWithDefaults() *PrivateData {
	this := PrivateData{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PrivateData) GetValue() []string {
	if o == nil || o.Value == nil {
		var ret []string
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateData) GetValueOk() ([]string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PrivateData) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given []string and assigns it to the Value field.
func (o *PrivateData) SetValue(v []string) {
	o.Value = v
}

func (o PrivateData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullablePrivateData struct {
	value *PrivateData
	isSet bool
}

func (v NullablePrivateData) Get() *PrivateData {
	return v.value
}

func (v *NullablePrivateData) Set(val *PrivateData) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateData) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateData(val *PrivateData) *NullablePrivateData {
	return &NullablePrivateData{value: val, isSet: true}
}

func (v NullablePrivateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


