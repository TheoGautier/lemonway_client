/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionsTransactionAccount struct for TransactionsTransactionAccount
type TransactionsTransactionAccount struct {
	Value []TransactionAccount `json:"value,omitempty"`
}

// NewTransactionsTransactionAccount instantiates a new TransactionsTransactionAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionsTransactionAccount() *TransactionsTransactionAccount {
	this := TransactionsTransactionAccount{}
	return &this
}

// NewTransactionsTransactionAccountWithDefaults instantiates a new TransactionsTransactionAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsTransactionAccountWithDefaults() *TransactionsTransactionAccount {
	this := TransactionsTransactionAccount{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TransactionsTransactionAccount) GetValue() []TransactionAccount {
	if o == nil || o.Value == nil {
		var ret []TransactionAccount
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsTransactionAccount) GetValueOk() ([]TransactionAccount, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TransactionsTransactionAccount) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given []TransactionAccount and assigns it to the Value field.
func (o *TransactionsTransactionAccount) SetValue(v []TransactionAccount) {
	o.Value = v
}

func (o TransactionsTransactionAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionsTransactionAccount struct {
	value *TransactionsTransactionAccount
	isSet bool
}

func (v NullableTransactionsTransactionAccount) Get() *TransactionsTransactionAccount {
	return v.value
}

func (v *NullableTransactionsTransactionAccount) Set(val *TransactionsTransactionAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsTransactionAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsTransactionAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsTransactionAccount(val *TransactionsTransactionAccount) *NullableTransactionsTransactionAccount {
	return &NullableTransactionsTransactionAccount{value: val, isSet: true}
}

func (v NullableTransactionsTransactionAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsTransactionAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


