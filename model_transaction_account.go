/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionAccount struct for TransactionAccount
type TransactionAccount struct {
	TransactionIn *TransactionInDetails `json:"transactionIn,omitempty"`
	TransactionOut *TransactionOut `json:"transactionOut,omitempty"`
	TransactionP2P *TransactionP2P `json:"transactionP2P,omitempty"`
}

// NewTransactionAccount instantiates a new TransactionAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionAccount() *TransactionAccount {
	this := TransactionAccount{}
	return &this
}

// NewTransactionAccountWithDefaults instantiates a new TransactionAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionAccountWithDefaults() *TransactionAccount {
	this := TransactionAccount{}
	return &this
}

// GetTransactionIn returns the TransactionIn field value if set, zero value otherwise.
func (o *TransactionAccount) GetTransactionIn() TransactionInDetails {
	if o == nil || o.TransactionIn == nil {
		var ret TransactionInDetails
		return ret
	}
	return *o.TransactionIn
}

// GetTransactionInOk returns a tuple with the TransactionIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAccount) GetTransactionInOk() (*TransactionInDetails, bool) {
	if o == nil || o.TransactionIn == nil {
		return nil, false
	}
	return o.TransactionIn, true
}

// HasTransactionIn returns a boolean if a field has been set.
func (o *TransactionAccount) HasTransactionIn() bool {
	if o != nil && o.TransactionIn != nil {
		return true
	}

	return false
}

// SetTransactionIn gets a reference to the given TransactionInDetails and assigns it to the TransactionIn field.
func (o *TransactionAccount) SetTransactionIn(v TransactionInDetails) {
	o.TransactionIn = &v
}

// GetTransactionOut returns the TransactionOut field value if set, zero value otherwise.
func (o *TransactionAccount) GetTransactionOut() TransactionOut {
	if o == nil || o.TransactionOut == nil {
		var ret TransactionOut
		return ret
	}
	return *o.TransactionOut
}

// GetTransactionOutOk returns a tuple with the TransactionOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAccount) GetTransactionOutOk() (*TransactionOut, bool) {
	if o == nil || o.TransactionOut == nil {
		return nil, false
	}
	return o.TransactionOut, true
}

// HasTransactionOut returns a boolean if a field has been set.
func (o *TransactionAccount) HasTransactionOut() bool {
	if o != nil && o.TransactionOut != nil {
		return true
	}

	return false
}

// SetTransactionOut gets a reference to the given TransactionOut and assigns it to the TransactionOut field.
func (o *TransactionAccount) SetTransactionOut(v TransactionOut) {
	o.TransactionOut = &v
}

// GetTransactionP2P returns the TransactionP2P field value if set, zero value otherwise.
func (o *TransactionAccount) GetTransactionP2P() TransactionP2P {
	if o == nil || o.TransactionP2P == nil {
		var ret TransactionP2P
		return ret
	}
	return *o.TransactionP2P
}

// GetTransactionP2POk returns a tuple with the TransactionP2P field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAccount) GetTransactionP2POk() (*TransactionP2P, bool) {
	if o == nil || o.TransactionP2P == nil {
		return nil, false
	}
	return o.TransactionP2P, true
}

// HasTransactionP2P returns a boolean if a field has been set.
func (o *TransactionAccount) HasTransactionP2P() bool {
	if o != nil && o.TransactionP2P != nil {
		return true
	}

	return false
}

// SetTransactionP2P gets a reference to the given TransactionP2P and assigns it to the TransactionP2P field.
func (o *TransactionAccount) SetTransactionP2P(v TransactionP2P) {
	o.TransactionP2P = &v
}

func (o TransactionAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TransactionIn != nil {
		toSerialize["transactionIn"] = o.TransactionIn
	}
	if o.TransactionOut != nil {
		toSerialize["transactionOut"] = o.TransactionOut
	}
	if o.TransactionP2P != nil {
		toSerialize["transactionP2P"] = o.TransactionP2P
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionAccount struct {
	value *TransactionAccount
	isSet bool
}

func (v NullableTransactionAccount) Get() *TransactionAccount {
	return v.value
}

func (v *NullableTransactionAccount) Set(val *TransactionAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionAccount(val *TransactionAccount) *NullableTransactionAccount {
	return &NullableTransactionAccount{value: val, isSet: true}
}

func (v NullableTransactionAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


