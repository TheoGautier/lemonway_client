/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisterSddMandateInput struct for RegisterSddMandateInput
type RegisterSddMandateInput struct {
	// Payment Account ID
	Wallet string `json:"wallet"`
	// IBAN Holder
	Holder string `json:"holder"`
	// BIC Code (SWIFT)
	Bic string `json:"bic"`
	// IBAN
	Iban string `json:"iban"`
	// Indicates if the mandate is a SEPA business to business direct debit
	IsB2B *bool `json:"isB2B,omitempty"`
	// 1. If true, mandate is for recurring payments  2. If false, mandate is for one payment only
	IsRecurring bool `json:"isRecurring"`
	// Client Number and Street  Mandatory if you plan to electronically sign the mandate
	Street *string `json:"street,omitempty"`
	// Client Postal Code/ZIP  Mandatory if you plan to electronically sign the mandate
	PostCode *string `json:"postCode,omitempty"`
	// Client City  Mandatory if you plan to electronically sign the mandate
	City *string `json:"city,omitempty"`
	// Client Country  Mandatory if you plan to electronically sign the mandate.
	Country *string `json:"country,omitempty"`
	// Language of the automatically generated mandate(for electronic signature).  Currently, the available languages are: fr, en, de, es, it.  If you need another, please contact us.   \"fr\" is used by default if no language is requested.
	MandateLanguage *string `json:"mandateLanguage,omitempty"`
	// Unique Mandate Reference Number (UMR)
	Rum *string `json:"rum,omitempty"`
}

// NewRegisterSddMandateInput instantiates a new RegisterSddMandateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterSddMandateInput(wallet string, holder string, bic string, iban string, isRecurring bool) *RegisterSddMandateInput {
	this := RegisterSddMandateInput{}
	this.Wallet = wallet
	this.Holder = holder
	this.Bic = bic
	this.Iban = iban
	this.IsRecurring = isRecurring
	return &this
}

// NewRegisterSddMandateInputWithDefaults instantiates a new RegisterSddMandateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterSddMandateInputWithDefaults() *RegisterSddMandateInput {
	this := RegisterSddMandateInput{}
	return &this
}

// GetWallet returns the Wallet field value
func (o *RegisterSddMandateInput) GetWallet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Wallet
}

// GetWalletOk returns a tuple with the Wallet field value
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetWalletOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wallet, true
}

// SetWallet sets field value
func (o *RegisterSddMandateInput) SetWallet(v string) {
	o.Wallet = v
}

// GetHolder returns the Holder field value
func (o *RegisterSddMandateInput) GetHolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Holder
}

// GetHolderOk returns a tuple with the Holder field value
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetHolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Holder, true
}

// SetHolder sets field value
func (o *RegisterSddMandateInput) SetHolder(v string) {
	o.Holder = v
}

// GetBic returns the Bic field value
func (o *RegisterSddMandateInput) GetBic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bic
}

// GetBicOk returns a tuple with the Bic field value
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetBicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bic, true
}

// SetBic sets field value
func (o *RegisterSddMandateInput) SetBic(v string) {
	o.Bic = v
}

// GetIban returns the Iban field value
func (o *RegisterSddMandateInput) GetIban() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iban
}

// GetIbanOk returns a tuple with the Iban field value
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetIbanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iban, true
}

// SetIban sets field value
func (o *RegisterSddMandateInput) SetIban(v string) {
	o.Iban = v
}

// GetIsB2B returns the IsB2B field value if set, zero value otherwise.
func (o *RegisterSddMandateInput) GetIsB2B() bool {
	if o == nil || o.IsB2B == nil {
		var ret bool
		return ret
	}
	return *o.IsB2B
}

// GetIsB2BOk returns a tuple with the IsB2B field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetIsB2BOk() (*bool, bool) {
	if o == nil || o.IsB2B == nil {
		return nil, false
	}
	return o.IsB2B, true
}

// HasIsB2B returns a boolean if a field has been set.
func (o *RegisterSddMandateInput) HasIsB2B() bool {
	if o != nil && o.IsB2B != nil {
		return true
	}

	return false
}

// SetIsB2B gets a reference to the given bool and assigns it to the IsB2B field.
func (o *RegisterSddMandateInput) SetIsB2B(v bool) {
	o.IsB2B = &v
}

// GetIsRecurring returns the IsRecurring field value
func (o *RegisterSddMandateInput) GetIsRecurring() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRecurring
}

// GetIsRecurringOk returns a tuple with the IsRecurring field value
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetIsRecurringOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRecurring, true
}

// SetIsRecurring sets field value
func (o *RegisterSddMandateInput) SetIsRecurring(v bool) {
	o.IsRecurring = v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *RegisterSddMandateInput) GetStreet() string {
	if o == nil || o.Street == nil {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetStreetOk() (*string, bool) {
	if o == nil || o.Street == nil {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *RegisterSddMandateInput) HasStreet() bool {
	if o != nil && o.Street != nil {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *RegisterSddMandateInput) SetStreet(v string) {
	o.Street = &v
}

// GetPostCode returns the PostCode field value if set, zero value otherwise.
func (o *RegisterSddMandateInput) GetPostCode() string {
	if o == nil || o.PostCode == nil {
		var ret string
		return ret
	}
	return *o.PostCode
}

// GetPostCodeOk returns a tuple with the PostCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetPostCodeOk() (*string, bool) {
	if o == nil || o.PostCode == nil {
		return nil, false
	}
	return o.PostCode, true
}

// HasPostCode returns a boolean if a field has been set.
func (o *RegisterSddMandateInput) HasPostCode() bool {
	if o != nil && o.PostCode != nil {
		return true
	}

	return false
}

// SetPostCode gets a reference to the given string and assigns it to the PostCode field.
func (o *RegisterSddMandateInput) SetPostCode(v string) {
	o.PostCode = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *RegisterSddMandateInput) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *RegisterSddMandateInput) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *RegisterSddMandateInput) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *RegisterSddMandateInput) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *RegisterSddMandateInput) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *RegisterSddMandateInput) SetCountry(v string) {
	o.Country = &v
}

// GetMandateLanguage returns the MandateLanguage field value if set, zero value otherwise.
func (o *RegisterSddMandateInput) GetMandateLanguage() string {
	if o == nil || o.MandateLanguage == nil {
		var ret string
		return ret
	}
	return *o.MandateLanguage
}

// GetMandateLanguageOk returns a tuple with the MandateLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetMandateLanguageOk() (*string, bool) {
	if o == nil || o.MandateLanguage == nil {
		return nil, false
	}
	return o.MandateLanguage, true
}

// HasMandateLanguage returns a boolean if a field has been set.
func (o *RegisterSddMandateInput) HasMandateLanguage() bool {
	if o != nil && o.MandateLanguage != nil {
		return true
	}

	return false
}

// SetMandateLanguage gets a reference to the given string and assigns it to the MandateLanguage field.
func (o *RegisterSddMandateInput) SetMandateLanguage(v string) {
	o.MandateLanguage = &v
}

// GetRum returns the Rum field value if set, zero value otherwise.
func (o *RegisterSddMandateInput) GetRum() string {
	if o == nil || o.Rum == nil {
		var ret string
		return ret
	}
	return *o.Rum
}

// GetRumOk returns a tuple with the Rum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterSddMandateInput) GetRumOk() (*string, bool) {
	if o == nil || o.Rum == nil {
		return nil, false
	}
	return o.Rum, true
}

// HasRum returns a boolean if a field has been set.
func (o *RegisterSddMandateInput) HasRum() bool {
	if o != nil && o.Rum != nil {
		return true
	}

	return false
}

// SetRum gets a reference to the given string and assigns it to the Rum field.
func (o *RegisterSddMandateInput) SetRum(v string) {
	o.Rum = &v
}

func (o RegisterSddMandateInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["wallet"] = o.Wallet
	}
	if true {
		toSerialize["holder"] = o.Holder
	}
	if true {
		toSerialize["bic"] = o.Bic
	}
	if true {
		toSerialize["iban"] = o.Iban
	}
	if o.IsB2B != nil {
		toSerialize["isB2B"] = o.IsB2B
	}
	if true {
		toSerialize["isRecurring"] = o.IsRecurring
	}
	if o.Street != nil {
		toSerialize["street"] = o.Street
	}
	if o.PostCode != nil {
		toSerialize["postCode"] = o.PostCode
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.MandateLanguage != nil {
		toSerialize["mandateLanguage"] = o.MandateLanguage
	}
	if o.Rum != nil {
		toSerialize["rum"] = o.Rum
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterSddMandateInput struct {
	value *RegisterSddMandateInput
	isSet bool
}

func (v NullableRegisterSddMandateInput) Get() *RegisterSddMandateInput {
	return v.value
}

func (v *NullableRegisterSddMandateInput) Set(val *RegisterSddMandateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterSddMandateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterSddMandateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterSddMandateInput(val *RegisterSddMandateInput) *NullableRegisterSddMandateInput {
	return &NullableRegisterSddMandateInput{value: val, isSet: true}
}

func (v NullableRegisterSddMandateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterSddMandateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


