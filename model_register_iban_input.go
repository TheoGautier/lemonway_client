/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisterIBANInput struct for RegisterIBANInput
type RegisterIBANInput struct {
	// Payment Account ID
	AccountId string `json:"accountId"`
	// Registered Bank Account Owner: First and Last name, or Company Name
	Holder string `json:"holder"`
	// BIC/SWIFT Codes are arranged like this : AAAABBCCDDD  AAAA : 4 char for bank code  BB : 2 char for country code  CC : 2 char for location code  DDD : 3 char for branch code
	Bic *string `json:"bic,omitempty"`
	// IBAN
	Iban string `json:"iban"`
	// Bank Address Line 1
	Domiciliation1 *string `json:"domiciliation1,omitempty"`
	// Bank Address Line 2
	Domiciliation2 *string `json:"domiciliation2,omitempty"`
	// Reason for new IBAN if another IBAN is already linked to the Payment Account
	Comment *string `json:"comment,omitempty"`
}

// NewRegisterIBANInput instantiates a new RegisterIBANInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterIBANInput(accountId string, holder string, iban string) *RegisterIBANInput {
	this := RegisterIBANInput{}
	this.AccountId = accountId
	this.Holder = holder
	this.Iban = iban
	return &this
}

// NewRegisterIBANInputWithDefaults instantiates a new RegisterIBANInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterIBANInputWithDefaults() *RegisterIBANInput {
	this := RegisterIBANInput{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *RegisterIBANInput) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *RegisterIBANInput) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *RegisterIBANInput) SetAccountId(v string) {
	o.AccountId = v
}

// GetHolder returns the Holder field value
func (o *RegisterIBANInput) GetHolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Holder
}

// GetHolderOk returns a tuple with the Holder field value
// and a boolean to check if the value has been set.
func (o *RegisterIBANInput) GetHolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Holder, true
}

// SetHolder sets field value
func (o *RegisterIBANInput) SetHolder(v string) {
	o.Holder = v
}

// GetBic returns the Bic field value if set, zero value otherwise.
func (o *RegisterIBANInput) GetBic() string {
	if o == nil || o.Bic == nil {
		var ret string
		return ret
	}
	return *o.Bic
}

// GetBicOk returns a tuple with the Bic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIBANInput) GetBicOk() (*string, bool) {
	if o == nil || o.Bic == nil {
		return nil, false
	}
	return o.Bic, true
}

// HasBic returns a boolean if a field has been set.
func (o *RegisterIBANInput) HasBic() bool {
	if o != nil && o.Bic != nil {
		return true
	}

	return false
}

// SetBic gets a reference to the given string and assigns it to the Bic field.
func (o *RegisterIBANInput) SetBic(v string) {
	o.Bic = &v
}

// GetIban returns the Iban field value
func (o *RegisterIBANInput) GetIban() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iban
}

// GetIbanOk returns a tuple with the Iban field value
// and a boolean to check if the value has been set.
func (o *RegisterIBANInput) GetIbanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Iban, true
}

// SetIban sets field value
func (o *RegisterIBANInput) SetIban(v string) {
	o.Iban = v
}

// GetDomiciliation1 returns the Domiciliation1 field value if set, zero value otherwise.
func (o *RegisterIBANInput) GetDomiciliation1() string {
	if o == nil || o.Domiciliation1 == nil {
		var ret string
		return ret
	}
	return *o.Domiciliation1
}

// GetDomiciliation1Ok returns a tuple with the Domiciliation1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIBANInput) GetDomiciliation1Ok() (*string, bool) {
	if o == nil || o.Domiciliation1 == nil {
		return nil, false
	}
	return o.Domiciliation1, true
}

// HasDomiciliation1 returns a boolean if a field has been set.
func (o *RegisterIBANInput) HasDomiciliation1() bool {
	if o != nil && o.Domiciliation1 != nil {
		return true
	}

	return false
}

// SetDomiciliation1 gets a reference to the given string and assigns it to the Domiciliation1 field.
func (o *RegisterIBANInput) SetDomiciliation1(v string) {
	o.Domiciliation1 = &v
}

// GetDomiciliation2 returns the Domiciliation2 field value if set, zero value otherwise.
func (o *RegisterIBANInput) GetDomiciliation2() string {
	if o == nil || o.Domiciliation2 == nil {
		var ret string
		return ret
	}
	return *o.Domiciliation2
}

// GetDomiciliation2Ok returns a tuple with the Domiciliation2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIBANInput) GetDomiciliation2Ok() (*string, bool) {
	if o == nil || o.Domiciliation2 == nil {
		return nil, false
	}
	return o.Domiciliation2, true
}

// HasDomiciliation2 returns a boolean if a field has been set.
func (o *RegisterIBANInput) HasDomiciliation2() bool {
	if o != nil && o.Domiciliation2 != nil {
		return true
	}

	return false
}

// SetDomiciliation2 gets a reference to the given string and assigns it to the Domiciliation2 field.
func (o *RegisterIBANInput) SetDomiciliation2(v string) {
	o.Domiciliation2 = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RegisterIBANInput) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterIBANInput) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RegisterIBANInput) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RegisterIBANInput) SetComment(v string) {
	o.Comment = &v
}

func (o RegisterIBANInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["holder"] = o.Holder
	}
	if o.Bic != nil {
		toSerialize["bic"] = o.Bic
	}
	if true {
		toSerialize["iban"] = o.Iban
	}
	if o.Domiciliation1 != nil {
		toSerialize["domiciliation1"] = o.Domiciliation1
	}
	if o.Domiciliation2 != nil {
		toSerialize["domiciliation2"] = o.Domiciliation2
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterIBANInput struct {
	value *RegisterIBANInput
	isSet bool
}

func (v NullableRegisterIBANInput) Get() *RegisterIBANInput {
	return v.value
}

func (v *NullableRegisterIBANInput) Set(val *RegisterIBANInput) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterIBANInput) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterIBANInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterIBANInput(val *RegisterIBANInput) *NullableRegisterIBANInput {
	return &NullableRegisterIBANInput{value: val, isSet: true}
}

func (v NullableRegisterIBANInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterIBANInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


