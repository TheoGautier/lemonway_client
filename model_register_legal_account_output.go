/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RegisterLegalAccountOutput struct for RegisterLegalAccountOutput
type RegisterLegalAccountOutput struct {
	LegalAccount *LegalAccount `json:"legalAccount,omitempty"`
	Error *Error `json:"error,omitempty"`
}

// NewRegisterLegalAccountOutput instantiates a new RegisterLegalAccountOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterLegalAccountOutput() *RegisterLegalAccountOutput {
	this := RegisterLegalAccountOutput{}
	return &this
}

// NewRegisterLegalAccountOutputWithDefaults instantiates a new RegisterLegalAccountOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterLegalAccountOutputWithDefaults() *RegisterLegalAccountOutput {
	this := RegisterLegalAccountOutput{}
	return &this
}

// GetLegalAccount returns the LegalAccount field value if set, zero value otherwise.
func (o *RegisterLegalAccountOutput) GetLegalAccount() LegalAccount {
	if o == nil || o.LegalAccount == nil {
		var ret LegalAccount
		return ret
	}
	return *o.LegalAccount
}

// GetLegalAccountOk returns a tuple with the LegalAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterLegalAccountOutput) GetLegalAccountOk() (*LegalAccount, bool) {
	if o == nil || o.LegalAccount == nil {
		return nil, false
	}
	return o.LegalAccount, true
}

// HasLegalAccount returns a boolean if a field has been set.
func (o *RegisterLegalAccountOutput) HasLegalAccount() bool {
	if o != nil && o.LegalAccount != nil {
		return true
	}

	return false
}

// SetLegalAccount gets a reference to the given LegalAccount and assigns it to the LegalAccount field.
func (o *RegisterLegalAccountOutput) SetLegalAccount(v LegalAccount) {
	o.LegalAccount = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *RegisterLegalAccountOutput) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterLegalAccountOutput) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *RegisterLegalAccountOutput) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *RegisterLegalAccountOutput) SetError(v Error) {
	o.Error = &v
}

func (o RegisterLegalAccountOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LegalAccount != nil {
		toSerialize["legalAccount"] = o.LegalAccount
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterLegalAccountOutput struct {
	value *RegisterLegalAccountOutput
	isSet bool
}

func (v NullableRegisterLegalAccountOutput) Get() *RegisterLegalAccountOutput {
	return v.value
}

func (v *NullableRegisterLegalAccountOutput) Set(val *RegisterLegalAccountOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterLegalAccountOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterLegalAccountOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterLegalAccountOutput(val *RegisterLegalAccountOutput) *NullableRegisterLegalAccountOutput {
	return &NullableRegisterLegalAccountOutput{value: val, isSet: true}
}

func (v NullableRegisterLegalAccountOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterLegalAccountOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


