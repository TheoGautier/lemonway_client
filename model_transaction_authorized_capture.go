/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionAuthorizedCapture struct for TransactionAuthorizedCapture
type TransactionAuthorizedCapture struct {
	// Transaction ID
	Id *int64 `json:"id,omitempty"`
	// Transaction initialization date, UTC Unix timestamp
	Date *int32 `json:"date,omitempty"`
	// Your fee  Amounts are given as integer numbers in cents
	CommissionAmount *int32 `json:"commissionAmount,omitempty"`
	// Comment
	Comment *string `json:"comment,omitempty"`
	LemonWayCommission *LemonWayCommission `json:"lemonWayCommission,omitempty"`
	// Transaction Amount  Amounts represented in integer (cents)
	Amount *int32 `json:"amount,omitempty"`
	RefundAmount *float64 `json:"refundAmount,omitempty"`
	// Transaction execution date
	ExecutionDate *int32 `json:"executionDate,omitempty"`
	Status *int32 `json:"status,omitempty"`
	PSP *PSP `json:"PSP,omitempty"`
	// Unique ID generated by your server
	Reference *string `json:"reference,omitempty"`
}

// NewTransactionAuthorizedCapture instantiates a new TransactionAuthorizedCapture object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionAuthorizedCapture() *TransactionAuthorizedCapture {
	this := TransactionAuthorizedCapture{}
	return &this
}

// NewTransactionAuthorizedCaptureWithDefaults instantiates a new TransactionAuthorizedCapture object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionAuthorizedCaptureWithDefaults() *TransactionAuthorizedCapture {
	this := TransactionAuthorizedCapture{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TransactionAuthorizedCapture) SetId(v int64) {
	o.Id = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetDate() int32 {
	if o == nil || o.Date == nil {
		var ret int32
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetDateOk() (*int32, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given int32 and assigns it to the Date field.
func (o *TransactionAuthorizedCapture) SetDate(v int32) {
	o.Date = &v
}

// GetCommissionAmount returns the CommissionAmount field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetCommissionAmount() int32 {
	if o == nil || o.CommissionAmount == nil {
		var ret int32
		return ret
	}
	return *o.CommissionAmount
}

// GetCommissionAmountOk returns a tuple with the CommissionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetCommissionAmountOk() (*int32, bool) {
	if o == nil || o.CommissionAmount == nil {
		return nil, false
	}
	return o.CommissionAmount, true
}

// HasCommissionAmount returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasCommissionAmount() bool {
	if o != nil && o.CommissionAmount != nil {
		return true
	}

	return false
}

// SetCommissionAmount gets a reference to the given int32 and assigns it to the CommissionAmount field.
func (o *TransactionAuthorizedCapture) SetCommissionAmount(v int32) {
	o.CommissionAmount = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *TransactionAuthorizedCapture) SetComment(v string) {
	o.Comment = &v
}

// GetLemonWayCommission returns the LemonWayCommission field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetLemonWayCommission() LemonWayCommission {
	if o == nil || o.LemonWayCommission == nil {
		var ret LemonWayCommission
		return ret
	}
	return *o.LemonWayCommission
}

// GetLemonWayCommissionOk returns a tuple with the LemonWayCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetLemonWayCommissionOk() (*LemonWayCommission, bool) {
	if o == nil || o.LemonWayCommission == nil {
		return nil, false
	}
	return o.LemonWayCommission, true
}

// HasLemonWayCommission returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasLemonWayCommission() bool {
	if o != nil && o.LemonWayCommission != nil {
		return true
	}

	return false
}

// SetLemonWayCommission gets a reference to the given LemonWayCommission and assigns it to the LemonWayCommission field.
func (o *TransactionAuthorizedCapture) SetLemonWayCommission(v LemonWayCommission) {
	o.LemonWayCommission = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *TransactionAuthorizedCapture) SetAmount(v int32) {
	o.Amount = &v
}

// GetRefundAmount returns the RefundAmount field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetRefundAmount() float64 {
	if o == nil || o.RefundAmount == nil {
		var ret float64
		return ret
	}
	return *o.RefundAmount
}

// GetRefundAmountOk returns a tuple with the RefundAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetRefundAmountOk() (*float64, bool) {
	if o == nil || o.RefundAmount == nil {
		return nil, false
	}
	return o.RefundAmount, true
}

// HasRefundAmount returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasRefundAmount() bool {
	if o != nil && o.RefundAmount != nil {
		return true
	}

	return false
}

// SetRefundAmount gets a reference to the given float64 and assigns it to the RefundAmount field.
func (o *TransactionAuthorizedCapture) SetRefundAmount(v float64) {
	o.RefundAmount = &v
}

// GetExecutionDate returns the ExecutionDate field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetExecutionDate() int32 {
	if o == nil || o.ExecutionDate == nil {
		var ret int32
		return ret
	}
	return *o.ExecutionDate
}

// GetExecutionDateOk returns a tuple with the ExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetExecutionDateOk() (*int32, bool) {
	if o == nil || o.ExecutionDate == nil {
		return nil, false
	}
	return o.ExecutionDate, true
}

// HasExecutionDate returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasExecutionDate() bool {
	if o != nil && o.ExecutionDate != nil {
		return true
	}

	return false
}

// SetExecutionDate gets a reference to the given int32 and assigns it to the ExecutionDate field.
func (o *TransactionAuthorizedCapture) SetExecutionDate(v int32) {
	o.ExecutionDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *TransactionAuthorizedCapture) SetStatus(v int32) {
	o.Status = &v
}

// GetPSP returns the PSP field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetPSP() PSP {
	if o == nil || o.PSP == nil {
		var ret PSP
		return ret
	}
	return *o.PSP
}

// GetPSPOk returns a tuple with the PSP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetPSPOk() (*PSP, bool) {
	if o == nil || o.PSP == nil {
		return nil, false
	}
	return o.PSP, true
}

// HasPSP returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasPSP() bool {
	if o != nil && o.PSP != nil {
		return true
	}

	return false
}

// SetPSP gets a reference to the given PSP and assigns it to the PSP field.
func (o *TransactionAuthorizedCapture) SetPSP(v PSP) {
	o.PSP = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *TransactionAuthorizedCapture) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAuthorizedCapture) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *TransactionAuthorizedCapture) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *TransactionAuthorizedCapture) SetReference(v string) {
	o.Reference = &v
}

func (o TransactionAuthorizedCapture) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.CommissionAmount != nil {
		toSerialize["commissionAmount"] = o.CommissionAmount
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.LemonWayCommission != nil {
		toSerialize["lemonWayCommission"] = o.LemonWayCommission
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.RefundAmount != nil {
		toSerialize["refundAmount"] = o.RefundAmount
	}
	if o.ExecutionDate != nil {
		toSerialize["executionDate"] = o.ExecutionDate
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.PSP != nil {
		toSerialize["PSP"] = o.PSP
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionAuthorizedCapture struct {
	value *TransactionAuthorizedCapture
	isSet bool
}

func (v NullableTransactionAuthorizedCapture) Get() *TransactionAuthorizedCapture {
	return v.value
}

func (v *NullableTransactionAuthorizedCapture) Set(val *TransactionAuthorizedCapture) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionAuthorizedCapture) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionAuthorizedCapture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionAuthorizedCapture(val *TransactionAuthorizedCapture) *NullableTransactionAuthorizedCapture {
	return &NullableTransactionAuthorizedCapture{value: val, isSet: true}
}

func (v NullableTransactionAuthorizedCapture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionAuthorizedCapture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


